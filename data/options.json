{"last_update":"June 24, 2024 at  4:24 UTC","options":[{"title":"_module.args","description":"Additional arguments passed to each module in addition to oneslike `lib`, `config`,and `pkgs`, `modulesPath`.This option is also available to all submodules. Submodules do notinherit args from their parent module, nor do they provide args totheir parent module or sibling submodules. The sole exception tothis is the argument `name` which is provided byparent modules to a submodule and contains the attribute namethe submodule is bound to, or a unique generated name if it isnot bound to an attribute.Some arguments are already passed by default, of which thefollowing *cannot* be changed with this option:- {var}`lib`: The nixpkgs library.- {var}`config`: The results of all options after merging the values from all modules together.- {var}`options`: The options declared in all modules.- {var}`specialArgs`: The `specialArgs` argument passed to `evalModules`.- All attributes of {var}`specialArgs`  Whereas option values can generally depend on other option values  thanks to laziness, this does not apply to `imports`, which  must be computed statically before anything else.  For this reason, callers of the module system can provide `specialArgs`  which are available during import resolution.  For NixOS, `specialArgs` includes  {var}`modulesPath`, which allows you to import  extra modules from the nixpkgs package tree without having to  somehow make the module aware of the location of the  `nixpkgs` or NixOS directories.  ```  { modulesPath, ... }: {    imports = [      (modulesPath + \"/profiles/minimal.nix\")    ];  }  ```For NixOS, the default value for this option includes at least this argument:- {var}`pkgs`: The nixpkgs package set according to  the {option}`nixpkgs.pkgs` option.","note":"","type":"lazy attribute set of raw value","default":"","example":"","declared_by":"<a href=\"https://github.com/NixNeovim/NixNeovim/blob/main/lib/modules.nix\">nixneovim/lib/modules.nix</a><br/>"},{"title":"programs.nixneovim.enable","description":"Whether to enable enable nixneovim.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.package","description":"The package to use for neovim.","note":"","type":"null or package","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.augroups","description":"Custom autocmd groups","note":"","type":"attribute set of (submodule)","default":"{ }","example":"''  augroups.highlightOnYank = {    autocmds = [{      event = \"TextYankPost\";      pattern = \"*\";      luaCallback = '''        vim.highlight.on_yank {          higroup = (            vim.fn['hlexists'] 'HighlightedyankRegion' > 0 and 'HighlightedyankRegion' or 'IncSearch'          ),          timeout = 200,        }      ''';    }];  };''","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds","description":"The autocmds that are part of this augroup.See :help nvim_create_autocmd()","note":"","type":"list of (submodule)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.buffer","description":"buffer number for buffer-local autocommands. Cannot be used with pattern.","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.command","description":"Vim command to execute on event. Cannot be used with {lua,vim}Callback","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.desc","description":"description (for documentation and troubleshooting)","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.event","description":"Event(s) that will trigger the handler (callback or command).","note":"","type":"string or list of string","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.luaCallback","description":"Lua function called when the event(s) is triggered.Can return true to delete the autocommand, and receives a table argument (opts) with these keys:   • id: (number) autocommand id   • event: (string) name of the triggered event |autocmd-events|   • group: (number|nil) autocommand group id, if any   • match: (string) expanded value of |<amatch>|   • buf: (number) expanded value of |<abuf>|   • file: (string) expanded value of |<afile>|   • data: (any) arbitrary data passed from |nvim_exec_autocmds()|Will be expanded to:```luafunction(opts)  ${luaCallback}end```","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"''  vim.highlight.on_yank {    higroup = (      vim.fn['hlexists'] 'HighlightedyankRegion' > 0 and 'HighlightedyankRegion' or 'IncSearch'    ),    timeout = 200,  }''","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.nested","description":"Run nested autocommands","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.once","description":"Run the autocommand only once","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.pattern","description":"Pattern(s) to match literally.Note: `pattern` is NOT automatically expanded (unlike with |:autocmd|), thus names like\"$HOME\" and \"~\" must be expanded explicitly.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.autocmds.*.vimCallback","description":"Vimscript function name called when the event(s) is triggered.Conflicts with luaCallback","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.clear","description":"Clear existing commands if the group already exists.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.augroups.&lt;name&gt;.name","description":"The name of the augroup. If undefined, the name of the attribute set will be used.","note":"","type":"string","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.colorscheme","description":"The name of the colorscheme","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.enable","description":"Whether to enable Enable the bamboo plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.cmpItemkindReverse","description":"Show the end-of-buffer tildes. By default they are hidden","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.codeStyle.comments","description":"You can configure multiple style with comma separated, For e.g., keywords = 'italic,bold'","note":"","type":"null or string","default":"\"italic\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.codeStyle.functions","description":"You can configure multiple style with comma separated, For e.g., keywords = 'italic,bold'","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.codeStyle.keywords","description":"You can configure multiple style with comma separated, For e.g., keywords = 'italic,bold'","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.codeStyle.strings","description":"You can configure multiple style with comma separated, For e.g., keywords = 'italic,bold'","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.codeStyle.variables","description":"You can configure multiple style with comma separated, For e.g., keywords = 'italic,bold'","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.diagnostics.background","description":"use undercurl instead of underline for diagnostics","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.diagnostics.darker","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.diagnostics.undercurl","description":"darker colors for diagnostic","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.endingTildes","description":"Change terminal color as per the selected theme style","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.lualine.transparent","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.style","description":"","note":"","type":"null or one of \"vulgaris\", \"multiplex\"","default":"\"vulgaris\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.termColors","description":"Show/hide background","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.toggleStyleList","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.bamboo.transparent","description":"List of styles to toggle between (this option is essentially pointless now but will become useful if more style variations are added)","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.base16.enable","description":"Whether to enable base16.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.base16.colorscheme","description":"The base16 colorscheme to use","note":"","type":"one of \"3024\", \"apathy\", \"ashes\", \"atelier-cave-light\", \"atelier-cave\", \"atelier-dune-light\", \"atelier-dune\", \"atelier-estuary-light\", \"atelier-estuary\", \"atelier-forest-light\", \"atelier-forest\", \"atelier-heath-light\", \"atelier-heath\", \"atelier-lakeside-light\", \"atelier-lakeside\", \"atelier-plateau-light\", \"atelier-plateau\", \"atelier-savanna-light\", \"atelier-savanna\", \"atelier-seaside-light\", \"atelier-seaside\", \"atelier-sulphurpool-light\", \"atelier-sulphurpool\", \"atlas\", \"bespin\", \"black-metal-bathory\", \"black-metal-burzum\", \"black-metal-dark-funeral\", \"black-metal-gorgoroth\", \"black-metal-immortal\", \"black-metal-khold\", \"black-metal-marduk\", \"black-metal-mayhem\", \"black-metal-nile\", \"black-metal-venom\", \"black-metal\", \"brewer\", \"bright\", \"brogrammer\", \"brushtrees-dark\", \"brushtrees\", \"chalk\", \"circus\", \"classic-dark\", \"classic-light\", \"codeschool\", \"cupcake\", \"cupertino\", \"darktooth\", \"default-dark\", \"default-light\", \"dracula\", \"eighties\", \"embers\", \"flat\", \"fruit-soda\", \"github\", \"google-dark\", \"google-light\", \"grayscale-dark\", \"grayscale-light\", \"greenscreen\", \"gruvbox-dark-hard\", \"gruvbox-dark-medium\", \"gruvbox-dark-pale\", \"gruvbox-dark-soft\", \"gruvbox-light-hard\", \"gruvbox-light-medium\", \"gruvbox-light-soft\", \"harmonic-dark\", \"harmonic-light\", \"heetch-light\", \"heetch\", \"helios\", \"hopscotch\", \"horizon-dark\", \"ia-dark\", \"ia-light\", \"icy\", \"irblack\", \"isotope\", \"macintosh\", \"marrakesh\", \"material-darker\", \"material-lighter\", \"material-palenight\", \"material\", \"material-vivid\", \"materia\", \"mellow-purple\", \"mexico-light\", \"mocha\", \"monokai\", \"nord\", \"oceanicnext\", \"ocean\", \"onedark\", \"one-light\", \"outrun-dark\", \"papercolor-dark\", \"papercolor-light\", \"paraiso\", \"phd\", \"pico\", \"pop\", \"porple\", \"railscasts\", \"rebecca\", \"seti\", \"shapeshifter\", \"snazzy\", \"solarflare\", \"solarized-dark\", \"solarized-light\", \"spacemacs\", \"summerfruit-dark\", \"summerfruit-light\", \"synth-midnight-dark\", \"tomorrow-night-eighties\", \"tomorrow-night\", \"tomorrow\", \"tube\", \"twilight\", \"unikitty-dark\", \"unikitty-light\", \"woodland\", \"xcode-dusk\", \"zenburn\"","default":"\"default-dark\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.base16.setUpBar","description":"Whether to install the matching plugin for your statusbar. This does nothing as of yet, waiting for upstream support.","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.base16.useTruecolor","description":"Whether to use truecolor for the colorschemes. If set to false, you'll need to set up base16 in your shell.","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.enable","description":"Whether to enable Enable the catppuccin plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.background.dark","description":"","note":"","type":"null or string","default":"\"mocha\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.background.light","description":"","note":"","type":"null or string","default":"\"latte\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.dimInactive.enabled","description":"Dim background color of active window.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.dimInactive.percentage","description":"Percentage of the shade to apply to inactive window.","note":"","type":"null or floating point number","default":"0.15","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.dimInactive.shade","description":"Set shade of dim color.","note":"","type":"null or string","default":"\"dark\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.flavour","description":"Set flavour of Catppuccin theme.","note":"","type":"null or one of \"latte\", \"frappe\", \"macchiato\", \"mocha\"","default":"\"mocha\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.integrations.cmp","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.integrations.gitsigns","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.integrations.mini.enabled","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.integrations.mini.indentscopeColor","description":"","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.integrations.notify","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.integrations.nvimtree","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.integrations.treesitter","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.noBold","description":"Force no bold.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.noItalic","description":"Force no italic.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.noUnderline","description":"Force no underline.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.showEndOfBuffer","description":"Show '~' character after the end of buffers.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.style.comments","description":"Change the style of comments.","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.style.conditionals","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.termColors","description":"Set terminal colors.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.catppuccin.transparentBackground","description":"Disable setting the background color.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.enable","description":"Whether to enable Enable the gruvbox-baby plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.backgroundColor","description":"","note":"","type":"null or one of \"medium\", \"dark\"","default":"\"medium\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.colorOverrides","description":"Override color palette with your custom colors","note":"","type":"null or (attribute set of anything)","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.commentStyle","description":"See :h attr-list","note":"","type":"null or string","default":"\"italic\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.functionStyle","description":"See :h attr-list","note":"","type":"null or string","default":"\"bold\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.highlights","description":"Override highlights with your custom highlights","note":"","type":"null or (attribute set of anything)","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.keywordStyle","description":"See :h attr-list","note":"","type":"null or string","default":"\"italic\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.stringStyle","description":"See :h attr-list","note":"","type":"null or string","default":"\"nocombine\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.transparentMode","description":"Set background colors to None","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.useOriginalPalette","description":"Use the original gruvbox palette","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-baby.variableStyle","description":"See :h attr-list","note":"","type":"null or string","default":"\"NONE\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.enable","description":"Whether to enable Enable the gruvbox-material plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.enableBold","description":"To enable bold in function name just like the original gruvbox, set this option to `1`.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.enableItalic","description":"To enable italic in this color scheme, set this option to `1`.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.background","description":"The background contrast used in this color scheme","note":"","type":"null or one of \"hard\", \"medium\", \"soft\"","default":"\"medium\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.betterPerformance","description":"The loading time of this color scheme is very long because too many file typesand plugins are optimized. This feature allows you to load part of the code ondemand by placing them in the `after/syntax` directory.Enabling this option will reduce loading time by approximately 50%.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.dimInactiveWindows","description":"Dim inactive windows. Only works in neovim currently.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.disableItalicComment","description":"By default, italic is enabled in `Comment`. To disable italic in `Comment`, set this option to `1`.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.foreground","description":"The foreground color palette used in this color scheme.- `material`: Carefully designed to have a soft contrast.- `mix`: Color palette obtained by calculating the mean of the other two.- `original`: The color palette used in the original gruvbox.","note":"","type":"null or one of \"material\", \"mix\", \"original\"","default":"\"material\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-material.transparentBackground","description":"If you want more ui components to be transparent (for example, status line background), set this option to `2`.","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-morhetz.enable","description":"Whether to enable Enable the gruvbox-morhetz plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-morhetz.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-morhetz.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-morhetz.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.enable","description":"Whether to enable gruvbox-nvim.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.bold","description":"Whether to enable bold.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.colorColumn","description":"The color column background","note":"","type":"null or one of \"bg\", \"red\", \"green\", \"yellow\", \"blue\", \"purple\", \"aqua\", \"gray\", \"fg\", \"bg0_h\", \"bg0\", \"bg1\", \"bg2\", \"bg3\", \"bg4\", \"gray\", \"orange\", \"bg0_s\", \"fg0\", \"fg1\", \"fg2\", \"fg3\", \"fg4\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.contrastDark","description":"Contrast for the dark mode","note":"","type":"null or one of \"soft\", \"medium\", \"hard\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.contrastLight","description":"Contrast for the light mode","note":"","type":"null or one of \"soft\", \"medium\", \"hard\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.highlightSearchCursor","description":"The cursor background while search is highlighted","note":"","type":"null or one of \"bg\", \"red\", \"green\", \"yellow\", \"blue\", \"purple\", \"aqua\", \"gray\", \"fg\", \"bg0_h\", \"bg0\", \"bg1\", \"bg2\", \"bg3\", \"bg4\", \"gray\", \"orange\", \"bg0_s\", \"fg0\", \"fg1\", \"fg2\", \"fg3\", \"fg4\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.improvedStrings","description":"Improved strings","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.improvedWarnings","description":"Improved warnings","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.invertIndentGuides","description":"Invert indent guides","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.invertSelection","description":"Invert the select text","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.invertSigns","description":"Invert GitGutter and Syntastic signs","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.invertTabline","description":"Invert tabline highlights","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.italicizeComments","description":"Italicize comments","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.italicizeStrings","description":"Italicize strings","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.italics","description":"Whether to enable italics.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.numberColumn","description":"The number column background","note":"","type":"null or one of \"bg\", \"red\", \"green\", \"yellow\", \"blue\", \"purple\", \"aqua\", \"gray\", \"fg\", \"bg0_h\", \"bg0\", \"bg1\", \"bg2\", \"bg3\", \"bg4\", \"gray\", \"orange\", \"bg0_s\", \"fg0\", \"fg1\", \"fg2\", \"fg3\", \"fg4\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.signColumn","description":"The sign column background","note":"","type":"null or one of \"bg\", \"red\", \"green\", \"yellow\", \"blue\", \"purple\", \"aqua\", \"gray\", \"fg\", \"bg0_h\", \"bg0\", \"bg1\", \"bg2\", \"bg3\", \"bg4\", \"gray\", \"orange\", \"bg0_s\", \"fg0\", \"fg1\", \"fg2\", \"fg3\", \"fg4\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.transparentBg","description":"Whether to enable Transparent background.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.trueColor","description":"Whether to enable true color support.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.undercurl","description":"Whether to enable undercurled text.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.underline","description":"Whether to enable underlined text.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.gruvbox-nvim.vertSplitColor","description":"The vertical split background color","note":"","type":"null or one of \"bg\", \"red\", \"green\", \"yellow\", \"blue\", \"purple\", \"aqua\", \"gray\", \"fg\", \"bg0_h\", \"bg0\", \"bg1\", \"bg2\", \"bg3\", \"bg4\", \"gray\", \"orange\", \"bg0_s\", \"fg0\", \"fg1\", \"fg2\", \"fg3\", \"fg4\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.enable","description":"Whether to enable Enable the kanagawa plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.background.dark","description":"","note":"","type":"null or string","default":"\"wave\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.background.light","description":"","note":"","type":"null or string","default":"\"lotus\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.commentstyle.italic","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.compile","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.diminactive","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.keywordstyle.italic","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.statementstyle.bold","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.terminalcolors","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.theme","description":"","note":"","type":"null or string","default":"\"wave\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.transparent","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.kanagawa.undercurl","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.nord.enable","description":"Whether to enable nord.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.nord.enable_sidebar_background","description":"Whether to enable Re-enables the background of the sidebar if you disabled the background of everything.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.nord.borders","description":"Whether to enable Enable the border between verticaly split windows visable.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.nord.contrast","description":"Whether to enable Make sidebars and popup menus like nvim-tree and telescope have a different background.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.nord.cursorline_transparent","description":"Whether to enable Set the cursorline transparent/visible.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.nord.disable_background","description":"Whether to enable Disable the setting of background color so that NeoVim can use your terminal background.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.nord.italic","description":"enables/disables italics","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.one.enable","description":"Whether to enable vim-one.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.onedark.enable","description":"Whether to enable onedark.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.enable","description":"Whether to enable Enable the rose-pine plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.bold_vert_split","description":"Disable bold vertical split","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.dark_variant","description":"","note":"","type":"null or one of \"main\", \"moon\", \"dawn\"","default":"\"main\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.dim_nc_background","description":"Dim the nc background","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.disable_background","description":"Disable the background","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.disable_float_background","description":"Disable the float background","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.disable_italics","description":"Disable italics","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.background","description":"Set the color of the background","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"base\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.background_nc","description":"Sets the color of the nc background","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"_experimental_nc\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.border","description":"Set the color of the border","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"highlight_med\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.comment","description":"Set the color of the comments","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"muted\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.error","description":"Set the color of errors","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"love\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.hint","description":"Set the color of hints","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"iris\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.info","description":"Set the color of info","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"foam\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.link","description":"Set the color of the links","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"iris\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.panel","description":"Set the color of the panel","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"surface\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.panel_nc","description":"Set the color of the panel nc","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"base\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.punctuation","description":"Set the color of the punctuation","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"subtle\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.groups.warn","description":"Set the color of warnings","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"gold\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.headings.h1","description":"Set the color of heading 1","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"iris\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.headings.h2","description":"Set the color of heading 2","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"foam\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.headings.h3","description":"Set the color of heading 3","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"rose\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.headings.h4","description":"Set the color of heading 4","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"gold\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.headings.h5","description":"Set the color of heading 5","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"pine\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.headings.h6","description":"Set the color of heading 6","note":"","type":"null or one of \"base\", \"surface\", \"overlay\", \"muted\", \"subtle\", \"text\", \"love\", \"gold\", \"rose\", \"pine\", \"foam\", \"iris\", \"highlight_low\", \"highlight_med\", \"highlight_high\", \"_experimental_nc\"","default":"\"foam\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.highlight_groups","description":"Change specific vim highlight groups","note":"","type":"null or (attribute set of anything)","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.rose-pine.variant","description":"","note":"","type":"null or one of \"auto\", \"main\", \"moon\", \"dawn\"","default":"\"auto\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.enable","description":"Whether to enable Enable the tokyonight plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.darkFloat","description":"Whether to enable Float windows like the lsp diagnostics windows get a darker background.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.darkSidebar","description":"Whether to enable Sidebar like windows like NvimTree get a darker background.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.hideInactiveStatusline","description":"Whether to enable Enabling this option will hide inactive statuslines and replace them with a thin border.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.italicComments","description":"Whether to enable Make comments italic.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.italicFunctions","description":"Whether to enable Make functions italic.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.italicKeywords","description":"Whether to enable Make keywords italic.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.italicVariables","description":"Whether to enable Make variables and identifiers italic.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.lualineBold","description":"Whether to enable When true, section headers in the lualine theme will be bold.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.style","description":"Theme style","note":"","type":"null or one of \"storm\", \"night\", \"day\"","default":"\"storm\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.terminalColors","description":"Whether to enable Configure the colors used when opening a :terminal in Neovim.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.transparent","description":"Whether to enable this to disable setting the background color.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.tokyonight.transparentSidebar","description":"Whether to enable Sidebar like windows like NvimTree get a transparent background.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.enable","description":"Whether to enable Enable the vscode plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.disable_nvim_tree_bg","description":"Whether to disable nvim-tree background color","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.italic_comments","description":"Whether to enable italic comments","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.style","description":"Theme style (light or dark)","note":"","type":"null or one of \"dark\", \"light\"","default":"\"dark\"","example":"","declared_by":""},{"title":"programs.nixneovim.colorschemes.vscode.transparent","description":"Whether to enable transparent background","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.configure","description":"Internal option","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.defaultEditor","description":"Configures neovim to be the default editor using the EDITOR environment variable.","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.extraConfigLua","description":"Extra contents for init.lua","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.extraConfigVim","description":"Extra contents for init.vim","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.extraLuaPostConfig","description":"Extra contents for init.lua after everything else","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.extraLuaPreConfig","description":"Extra contents for init.lua before everything else","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.extraPackages","description":"Extra packages to be made available to neovim","note":"","type":"list of package","default":"[ ]","example":"\"[ pkgs.shfmt ]\"","declared_by":""},{"title":"programs.nixneovim.extraPlugins","description":"List of vim plugins to install.","note":"","type":"list of (package or (submodule))","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.globals","description":"Global variables","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings","description":"Custom keybindings for any mode.For plain maps (e.g. just 'map' or 'remap') use maps.normalVisualOp.","note":"","type":"submodule","default":"{ }","example":"''  maps = {    normalVisualOp.\";\" = \":\"; # Same as noremap ; :    normal.\"<leader>m\" = {      silent = true;      action = \"<cmd>make<CR>\";    }; # Same as nnoremap <leader>m <silent> <cmd>make<CR>  };''","declared_by":""},{"title":"programs.nixneovim.mappings.command","description":"Mappings for command-line mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.insert","description":"Mappings for insert mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.insertCommand","description":"Mappings for insert and command-line mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.lang","description":"Mappings for insert, command-line and lang-arg mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.normal","description":"Mappings for normal mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.normalVisualOp","description":"Mappings for normal, visual, select and operator-pending (same as plain 'map') mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.operator","description":"Mappings for operator-pending mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.select","description":"Mappings for select mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.terminal","description":"Mappings for terminal mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.visual","description":"Mappings for visual and select mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.mappings.visualOnly","description":"Mappings for visual only mode","note":"","type":"attribute set of (string or (submodule))","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.options","description":"The configuration options, e.g. line numbers","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.enable","description":"Whether to enable airline.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.airline.extensions","description":"A list of extensions and their configuration","note":"","type":"null or (attribute set)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.onTop","description":"Whether to show the statusline on the top instead of the bottom","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.powerline","description":"Whether to use powerline symbols","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.sections","description":"Statusbar sections","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.sections.a","description":"Configuration for this section. Can be either a statusline-format string or a list of modules to be passed to airline#section#create_*.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.sections.b","description":"Configuration for this section. Can be either a statusline-format string or a list of modules to be passed to airline#section#create_*.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.sections.c","description":"Configuration for this section. Can be either a statusline-format string or a list of modules to be passed to airline#section#create_*.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.sections.x","description":"Configuration for this section. Can be either a statusline-format string or a list of modules to be passed to airline#section#create_*.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.sections.y","description":"Configuration for this section. Can be either a statusline-format string or a list of modules to be passed to airline#section#create_*.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.sections.z","description":"Configuration for this section. Can be either a statusline-format string or a list of modules to be passed to airline#section#create_*.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.airline.theme","description":"The theme to use for vim-airline. If set, vim-airline-themes will be installed.","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.asyncrun.enable","description":"Whether to enable Enable the asyncrun plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.asyncrun.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.asyncrun.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.asyncrun.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.enable","description":"Whether to enable Enable the barbar plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.animation","description":"Enable animations","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.autoHide","description":"Auto-hide the tab bar when there is only one buffer","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.clickable","description":"Enable clickable tabs - left-click: go to buffer - middle-click: delete buffer","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.closable","description":"Enable the close button","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.barbar.tabpages","description":"Enable 'current/total' tabpages indicator in top right corner","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufdelete.enable","description":"Whether to enable Enable the bufdelete plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.bufdelete.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufdelete.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufdelete.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.enable","description":"Whether to enable bufferline.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.alwaysShowBufferline","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.bufferCloseIcon","description":"The close icon for each buffer.","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.closeCommand","description":"Command or function run when closing a buffer.","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.closeIcon","description":"The close icon.","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.customFilter","description":"","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.diagnostics","description":"","note":"","type":"null or one of false, \"nvim_lsp\", \"coc\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.diagnosticsIndicator","description":"","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.diagnosticsUpdateInInsert","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.enforceRegularTabs","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.background","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.background.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.background.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.bufferSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.bufferSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.bufferSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.bufferVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.bufferVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.bufferVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButton","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButton.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButton.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButtonSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButtonSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButtonSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButtonVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButtonVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.closeButtonVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnostic","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnostic.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnostic.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnosticSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnosticSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnosticSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnosticVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnosticVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.diagnosticVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicate","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicate.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicate.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicateSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicateSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicateSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicateVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicateVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.duplicateVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.error","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.error.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.error.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnostic","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnostic.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnostic.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnosticSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnosticSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnosticSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnosticVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnosticVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorDiagnosticVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.errorVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.fill","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.fill.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.fill.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.indicatorSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.indicatorSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.indicatorSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.info","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.info.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.info.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnostic","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnostic.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnostic.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnosticSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnosticSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnosticSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnosticVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnosticVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoDiagnosticVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.infoVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modified","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modified.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modified.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modifiedSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modifiedSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modifiedSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modifiedVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modifiedVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.modifiedVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pick","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pick.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pick.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pickSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pickSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pickSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pickVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pickVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.pickVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separator","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separator.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separator.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separatorSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separatorSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separatorSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separatorVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separatorVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.separatorVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tab","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tab.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tab.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tabClose","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tabClose.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tabClose.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tabSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tabSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.tabSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warning","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warning.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warning.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnostic","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnostic.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnostic.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnosticSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnosticSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnosticSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnosticVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnosticVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningDiagnosticVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningSelected","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningSelected.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningSelected.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningVisible","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningVisible.guibg","description":"background color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.highlights.warningVisible.guifg","description":"foreground color","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.indicatorIcon","description":"The Icon shown as a indicator for buffer. Changing it is NOT recommended,         this is intended to be an escape hatch for people who cannot bear it for whatever reason.","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.leftMouseCommand","description":"Command or function run when clicking on a buffer.","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.leftTruncMarker","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.maxNameLength","description":"Max length of a buffer name.","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.maxPrefixLength","description":"Max length of a buffer prefix (used when a buffer is de-duplicated)","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.middleMouseCommand","description":"Command or function run when middle clicking on a buffer.","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.modifiedIcon","description":"The icon indicating a buffer was modified.","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.nameFormatter","description":"A lua function that can be used to modify the buffer's lable. The argument 'buf' containing a name, path and bufnr is supplied.","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.numbers","description":"A lua function customizing the styling of numbers.","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.offsets","description":"","note":"","type":"null or (list of (attribute set))","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.persistBufferSort","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.rightMouseCommand","description":"Command or function run when right clicking on a buffer.","note":"","type":"null or strings concatenated with \"\\n\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.rightTruncMarker","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.separatorStyle","description":"","note":"","type":"null or one of \"slant\", \"thick\", \"thin\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.showBufferCloseIcons","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.showBufferIcons","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.showCloseIcon","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.showTabIndicators","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.sortBy","description":"","note":"","type":"null or one of \"id\", \"extension\", \"relative_directory\", \"directory\", \"tabs\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.bufferline.tabSize","description":"Size of the tabs","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.enable","description":"Whether to enable Enable the clangd-extensions plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.highlights.detail","description":"","note":"","type":"null or string","default":"\"Comment\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.kindIcons.compound","description":"","note":"","type":"null or string","default":"\"🄲\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.kindIcons.packexpansion","description":"","note":"","type":"null or string","default":"\"🄿\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.kindIcons.recovery","description":"","note":"","type":"null or string","default":"\"🅁\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.kindIcons.templateparamobject","description":"","note":"","type":"null or string","default":"\"🅃\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.kindIcons.templatetemplateparm","description":"","note":"","type":"null or string","default":"\"🅃\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.kindIcons.templatetypeparm","description":"","note":"","type":"null or string","default":"\"🅃\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.kindIcons.translationunit","description":"","note":"","type":"null or string","default":"\"🅄\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.roleIcons.declaration","description":"","note":"","type":"null or string","default":"\"🄓\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.roleIcons.expression","description":"","note":"","type":"null or string","default":"\"🄔\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.roleIcons.specifier","description":"","note":"","type":"null or string","default":"\"🄢\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.roleIcons.statement","description":"","note":"","type":"null or string","default":"\";\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.roleIcons.\"template argument\"","description":"","note":"","type":"null or string","default":"\"🆃\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.ast.roleIcons.type","description":"","note":"","type":"null or string","default":"\"🄣\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.highlight","description":"The color of the hints","note":"","type":"null or string","default":"\"Comment\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.inline","description":"Options other than `highlight' and `priority' only work if `inline' is disabled","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.maxLenAlign","description":"whether to align to the length of the longest line in the file","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.maxLenAlignPadding","description":"padding from the left if max_len_align is true","note":"","type":"null or signed integer","default":"1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.onlyCurrentLine","description":"Only show inlay hints for the current line","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.onlyCurrentLineAutocmd","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.otherHintsPrefix","description":"prefix for all the other hints (type, chaining)","note":"","type":"null or string","default":"\"=> \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.parameterHintsPrefix","description":"prefix for parameter hints","note":"","type":"null or string","default":"\"<- \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.priority","description":"The highlight group priority for extmark","note":"","type":"null or signed integer","default":"100","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.rightAlign","description":"whether to align to the extreme right or not","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.rightAlignPadding","description":"padding from the right if right_align is true","note":"","type":"null or signed integer","default":"7","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.inlayHints.showParameterHints","description":"whether to show parameter hints with the inlay hints or not","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.memoryUsage.border","description":"","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.clangd-extensions.symbolInfo.border","description":"","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.enable","description":"Whether to enable Enable the colorizer plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.filtypes","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.AARRGGBB","description":"0xAARRGGBB hex codes","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.RGB","description":"#RGB hex codes","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.RRGGBB","description":"#RRGGBB hex codes","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.RRGGBBAA","description":"#RRGGBBAA hex codes","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.css","description":"Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.cssFn","description":"Enable all CSS *functions*: rgb_fn, hsl_fn","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.hlsFn","description":"CSS hsl() and hsla() functions","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.mode","description":"How to display the color","note":"","type":"null or one of \"background\", \"foreground\", \"virtualtext\"","default":"\"background\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.names","description":"\"Name\" codes like Blue or blue","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.rgbFn","description":"CSS rgb() and rgba() functions","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.sass.enable","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.sass.parsers","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.tailwind","description":"Enable tailwind colors","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.colorizer.userDefaultOptions.virtualtext","description":"","note":"","type":"null or string","default":"\"■\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.enable","description":"Whether to enable Enable the comment plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.comment.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.ignore","description":"Lines to be ignored while comment/uncomment","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.mappings","description":"Create basic (operator-pending) and extended mappings for NORMAL + VISUAL mode","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.mappings.basic","description":"operator-pending mapping. Includes 'gcc', 'gcb', 'gc[count]{motion}' and 'gb[count]{motion}'","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.mappings.extended","description":"extended mapping. Includes 'g>', 'g<', 'g>[count]{motion}' and 'g<[count]{motion}'","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.mappings.extra","description":"extra mapping. Includes 'gco', 'gc0', 'gcA'","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.opleader","description":"LHS of operator-pending mappings in NORMAL + VISUAL mode","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.opleader.block","description":"block-comment keymap","note":"","type":"string","default":"\"gb\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.opleader.line","description":"line-comment keymap","note":"","type":"string","default":"\"gc\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.padding","description":"Add a space b/w comment and the line","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.sticky","description":"Whether the cursor should stay at its position","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.toggler","description":"LHS of toggle mappings in NORMAL + VISUAL mode","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.toggler.block","description":"block-comment keymap","note":"","type":"string","default":"\"gbc\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment.toggler.line","description":"line-comment keymap","note":"","type":"string","default":"\"gcc\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.enable","description":"Whether to enable Enable the comment-frame plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.addCommentAbove","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.autoIndent","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.disableDefaultKeymap","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.endStr","description":"","note":"","type":"null or string","default":"\"//\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.fillChar","description":"","note":"","type":"null or string","default":"\"-\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.frameWidth","description":"","note":"","type":"null or signed integer","default":"70","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.keymap","description":"","note":"","type":"null or string","default":"\"<leader>cc\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.lineWrapLen","description":"","note":"","type":"null or signed integer","default":"50","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.multiline_keymap","description":"","note":"","type":"null or string","default":"\"<leader>C\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.comment-frame.startStr","description":"","note":"","type":"null or string","default":"\"//\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.commentary.enable","description":"Whether to enable commentary.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.copilot.enable","description":"Whether to enable Enable the copilot plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.copilot.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.copilot.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.copilot.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.copilot.filetypes","description":"Attribute set of file types","note":"","type":"attribute set of boolean","default":"{ }","example":"{        \"*\": false,        python: true      }","declared_by":""},{"title":"programs.nixneovim.plugins.copilot.proxy","description":"Address of proxy server for Copilot","note":"","type":"null or string","default":"null","example":"\"localhost:3128\"","declared_by":""},{"title":"programs.nixneovim.plugins.coq.enable","description":"Whether to enable coq.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.coq.autoStart","description":"Auto-start or shut up","note":"","type":"null or boolean or value \"shut-up\" (singular enum)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.coq.installArtifacts","description":"Whether to enable Install coq-artifacts.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.coq.recommendedKeymaps","description":"Use the recommended keymaps","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.enable","description":"Whether to enable dashboard.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.center","description":"Center section","note":"","type":"null or (list of (submodule))","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.center.*.action","description":"Item action","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.center.*.desc","description":"Item description","note":"","type":"string","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.center.*.icon","description":"Item icon","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.center.*.shortcut","description":"Item shortcut","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.footer","description":"Footer text","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.header","description":"Header text","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.hideStatusline","description":"Whether to hide statusline in Dashboard buffer","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.hideTabline","description":"Whether to hide tabline in Dashboard buffer","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.preview","description":"Preview options","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.preview.command","description":"Command to print file contents","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.preview.file","description":"Path to preview file","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.preview.height","description":"The height of the preview file","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.preview.width","description":"The width of the preview file","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.dashboard.sessionDirectory","description":"Path to session file","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.diffview.enable","description":"Whether to enable Enable the diffview plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.diffview.diffBinaries","description":"Show diffs for binaries","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.diffview.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.diffview.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.diffview.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.diffview.useIcons","description":"Requires nvim-web-devicons","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.diffview.watchIndex","description":"Update views and index buffers when the git index changes","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.easyescape.enable","description":"Whether to enable easyescape.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.emmet.enable","description":"Whether to enable Enable the emmet plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.emmet.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.emmet.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.emmet.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.emmet.leaderKey","description":"Set leader key","note":"","type":"null or string","default":"\"<C-Y>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.emmet.mode","description":"Mode where emmet will enable","note":"","type":"null or one of \"i\", \"n\", \"v\", \"a\"","default":"\"n\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.emmet.settings","description":"Emmet settings","note":"","type":"null or (attribute set of anything)","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.endwise.enable","description":"Whether to enable Enable the endwise plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.endwise.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.endwise.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.endwise.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.firenvim.enable","description":"Whether to enable Enable the firenvim plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.firenvim.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.firenvim.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.firenvim.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.enable","description":"Whether to enable floaterm.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.autoClose","description":"Whether to close floaterm window once the job gets finished.","note":"","type":"null or one of 0, 1, 2","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.autoHide","description":"Whether to hide previous floaterm before switching to or opening another one.","note":"","type":"null or one of 0, 1, 2","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.autoInsert","description":"Whether to enter Terminal-mode after opening a floaterm.","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.borderChars","description":"8 characters of the floating window border (top, right, bottom, left, topleft, topright, botright, botleft)","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.opener","description":"Command used for opening a file in the outside nvim from within :terminal","note":"","type":"null or one of \"edit\", \"split\", \"vsplit\", \"tabe\", \"drop\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.rootMarkers","description":"Markers used to detect the project root directory for --cwd=<root>","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.shell","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.title","description":"Show floaterm info at the top left corner of the floaterm window.","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.winHeight","description":"number of lines relative to &lines.","note":"","type":"null or floating point number","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.winType","description":"","note":"","type":"null or one of \"float\", \"split\", \"vsplit\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.floaterm.winWidth","description":"number of columns relative to &columns.","note":"","type":"null or floating point number","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.enable","description":"Whether to enable Enable the fm-nvim plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.brootConf","description":"Path to broot config","note":"","type":"null or string","default":"\"vim.fn.stdpath(\\\"data\\\") .. \\\"/site/pack/packer/start/fm-nvim/assets/broot_conf.hjson\\\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.brootCmd","description":"","note":"","type":"null or string","default":"\"broot\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.fffCmd","description":"","note":"","type":"null or string","default":"\"fff\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.fmCmd","description":"","note":"","type":"null or string","default":"\"fm\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.fzfCmd","description":"fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'","note":"","type":"null or string","default":"\"fzf\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.fzyCmd","description":"","note":"","type":"null or string","default":"\"find . | fzy\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.gituiCmd","description":"","note":"","type":"null or string","default":"\"gitui\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.joshutoCmd","description":"","note":"","type":"null or string","default":"\"joshuto\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.lazygitCmd","description":"","note":"","type":"null or string","default":"\"lazygit\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.lfCmd","description":"lf -command 'set hidden'","note":"","type":"null or string","default":"\"lf\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.neomuttCmd","description":"","note":"","type":"null or string","default":"\"neomutt\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.nnnCmd","description":"","note":"","type":"null or string","default":"\"nnn\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.rangerCmd","description":"","note":"","type":"null or string","default":"\"ranger\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.skimCmd","description":"","note":"","type":"null or string","default":"\"sk\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.taskwarriorCmd","description":"","note":"","type":"null or string","default":"\"taskwarrior-tui\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.twfCmd","description":"","note":"","type":"null or string","default":"\"twf\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.vifmCmd","description":"","note":"","type":"null or string","default":"\"vifm\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.cmds.xplrCmd","description":"","note":"","type":"null or string","default":"\"xplr\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.editCmd","description":"(Vim) Command used to open files","note":"","type":"null or string","default":"\"edit\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.mappings.edit","description":"","note":"","type":"null or string","default":"\"<C-e>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.mappings.esc","description":"","note":"","type":"null or string","default":"\"<ESC>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.mappings.horzSplit","description":"","note":"","type":"null or string","default":"\"<C-h>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.mappings.tabedit","description":"","note":"","type":"null or string","default":"\"<C-t>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.mappings.vertSplit","description":"","note":"","type":"null or string","default":"\"<C-v>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.default","description":"Default UI (can be \"split\" or \"float\")","note":"","type":"null or one of \"float\", \"split\"","default":"\"float\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.blend","description":"Floating Window Transparency (see ':h winblend')","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.border","description":"Floating window border (see ':h nvim_open_win')","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.borderHl","description":"Highlight group for floating window/border (see ':h winhl')","note":"","type":"null or string","default":"\"FloatBorder\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.floatHl","description":"Highlight group for floating window/border (see ':h winhl')","note":"","type":"null or string","default":"\"Normal\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.height","description":"Num from 0 - 1.0 for measurements","note":"","type":"null or floating point number","default":"0.8","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.width","description":"Num from 0 - 1.0 for measurements","note":"","type":"null or floating point number","default":"0.8","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.x","description":"X Axis of Window","note":"","type":"null or floating point number","default":"0.5","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.float.y","description":"Y Axis of Window","note":"","type":"null or floating point number","default":"0.5","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.split.direction","description":"Direction of split","note":"","type":"null or string","default":"\"topleft\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fm-nvim.ui.split.size","description":"Size of split","note":"","type":"null or signed integer","default":"24","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.enable","description":"Whether to enable Enable the focus plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.focus.autoresize.enable","description":"Enabele auto-reizing of splits","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.autoresize.height","description":"Force height for focused window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.autoresize.heightQuickfix","description":"Set the height of quickfix panel","note":"","type":"null or signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.autoresize.minheight","description":"Force minimum height for unfocused window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.autoresize.minwidth","description":"Force minimum width for unfocused window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.autoresize.width","description":"Force width for focused window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.commands","description":"Create focus commands","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.split.bufnew","description":"Create blank buffer for new split windows","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.focus.split.tmux","description":"Create tmux splits instead of neovim splits","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fugitive.enable","description":"Whether to enable Enable the fugitive plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.fugitive.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fugitive.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.fugitive.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ghosttext.enable","description":"Whether to enable Enable the ghosttext plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.ghosttext.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ghosttext.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ghosttext.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.git-messenger.enable","description":"Whether to enable Enable the git-messenger plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.git-messenger.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.git-messenger.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.git-messenger.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.enable","description":"Whether to enable gitgutter.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.enableByDefault","description":"Enable gitgutter by default","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.allowClobberSigns","description":"Don't preserve other signs on the sign column","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.defaultMaps","description":"Let gitgutter set default mappings","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.diffRelativeToWorkingTree","description":"Make diffs relative to the working tree instead of the index","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.extraDiffArgs","description":"Extra arguments to pass to git diff","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.extraGitArgs","description":"Extra arguments to pass to git","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.grep","description":"A non-standard grep to use instead of the default","note":"","type":"null or (submodule) or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.highlightLineNumbers","description":"Highlight line numbers by default","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.highlightLines","description":"Highlight lines by default","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.matchBackgrounds","description":"Make the background colors match the sign column","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.maxSigns","description":"Maximum number of signs to show on the screen. Unlimited by default.","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.previewWinFloating","description":"Preview hunks on floating windows","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.recommendedSettings","description":"Use recommended settings","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.runAsync","description":"Disable this to run git diff syncrhonously instead of asynchronously","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.showMessageOnHunkJumping","description":"Show a message when jumping between hunks","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signPriority","description":"GitGutter's sign priority on the sign column","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs","description":"Custom signs for the sign column","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs.added","description":"Sign for added lines","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs.modified","description":"Sign for modified lines","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs.modifiedAbove","description":"Sign for modified line above","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs.modifiedRemoved","description":"Sign for modified and removed lines","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs.removed","description":"Sign for removed lines","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs.removedAboveAndBelow","description":"Sign for lines removed above and  below","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signs.removedFirstLine","description":"Sign for a removed first line","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.signsByDefault","description":"Show signs by default","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.terminalReportFocus","description":"Let the terminal report its focus status","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitgutter.useLocationList","description":"Load chunks into windows's location list instead of the quickfix list","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.enable","description":"Whether to enable Enable the gitsigns plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.currentLineBlame","description":"Can be toggled with `:Gitsigns toggle_current_line_blame`","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.currentLineBlameOpts.delay","description":"Delay in seconds","note":"","type":"null or signed integer","default":"1000","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.currentLineBlameOpts.ignoreWhitespace","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.currentLineBlameOpts.virtText","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.currentLineBlameOpts.virtTextPos","description":"","note":"","type":"null or one of \"eol\", \"overlay\", \"right_align\"","default":"\"eol\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.linehl","description":"Highlgiht complete line. Can be toggled with `:Gitsigns toggle_linehl`","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.numhl","description":"Highlight line number. Can be toggled with `:Gitsigns toggle_numhl`","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.signcolumn","description":"Can be toggled with `:Gitsigns toggle_signs`","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.gitsigns.wordDiff","description":"Can be toggled with `:Gitsigns toggle_word_diff`","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.goyo.enable","description":"Whether to enable Enable the goyo plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.goyo.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.goyo.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.goyo.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.goyo.height","description":"","note":"","type":"null or signed integer","default":"85","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.goyo.linenr","description":"Show line numbers when in Goyo mode","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.goyo.width","description":"","note":"","type":"null or signed integer","default":"80","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.enable","description":"Whether to enable Enable the hbac plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.autoclose","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.closeBuffersWithWindows","description":"hbac will start closing unedited buffers once that number is reached","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.i.closeUnpinned","description":"","note":"","type":"null or string","default":"\"<M-c>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.i.deleteBuffer","description":"","note":"","type":"null or string","default":"\"<M-x>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.i.pinAll","description":"","note":"","type":"null or string","default":"\"<M-a>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.i.toggleSelections","description":"","note":"","type":"null or string","default":"\"<M-y>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.i.unpinAll","description":"","note":"","type":"null or string","default":"\"<M-u>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.n.closeUnpinned","description":"","note":"","type":"null or string","default":"\"<M-c>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.n.deleteBuffer","description":"","note":"","type":"null or string","default":"\"<M-x>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.n.pinAll","description":"","note":"","type":"null or string","default":"\"<M-a>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.n.toggleSelections","description":"","note":"","type":"null or string","default":"\"<M-y>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.telescope.mappings.n.unpinAll","description":"","note":"","type":"null or string","default":"\"<M-u>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.hbac.threshold","description":"set autoclose to false if you want to close manually","note":"","type":"null or signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.headlines.enable","description":"Whether to enable Enable the headlines plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.headlines.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.headlines.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.headlines.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.incline.enable","description":"Whether to enable Enable the incline plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.incline.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.incline.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.incline.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.enable","description":"Whether to enable Enable the indent-blankline plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.indent","description":"","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.indent.char","description":"Character, or list of characters, that get used todisplay the indentation guideEach character has to have a display width of 0 or 1","note":"","type":"string or list of string","default":"\"▎\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.indent.highlight","description":"Highlight group or color, or list of highlight groups and colors.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.indent.repeatLinebreak","description":"Repeat indentation guide on wrapped lines.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.indent.smartIndentCap","description":"Caps the number of indentation levels by looking at the surrounding code","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.scope","description":"","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.scope.enabled","description":"Enable scope highlighting.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.scope.char","description":"Character, or list of characters, that get used todisplay the scope indentation guideEach character has to have a display widthof 0 or 1","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.scope.highlight","description":"Highlight group or color, or list of highlight groups and colors.","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.scope.showEnd","description":"Underline last line of scope","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.indent-blankline.scope.showStart","description":"Underline first line of scope.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.intellitab.enable","description":"Whether to enable intellitab.nvim.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.enable","description":"Whether to enable Enable the ledger plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.detailedFirst","description":"Account completion sorted by depth instead of alphabetically","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.fillstring","description":"String used to fill the space between account name and amount in the foldtext","note":"","type":"null or string","default":"\" -\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.foldBlanks","description":"Hide blank lines following a transaction on a fold","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ledger.maxwidth","description":"Number of columns to display foldtext","note":"","type":"null or signed integer","default":"80","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.enable","description":"Whether to enable lightline.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.active","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.active.left","description":"List of components that will show up on the left side of the bar","note":"","type":"null or (list of list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.active.right","description":"List of components that will show up on the right side of the bar","note":"","type":"null or (list of list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.colorscheme","description":"The colorscheme to use for lightline. Defaults to .colorscheme.","note":"","type":"null or string","default":"null","example":"\"gruvbox\"","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.component","description":"Lightline component definitions. Uses 'statusline' syntax. Consult :h 'statusline' for a list of what's available.","note":"","type":"null or (attribute set of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.componentFunction","description":"A list of function component definitions.You should define the functions themselves in extraConfig","note":"","type":"null or (attribute set of string)","default":"null","example":"''  programs.nixneovim.plugins.lightline = {    enable = true;    componentFunction = {      readonly = \"LightlineReadonly\";    };      extraConfig = '''      function! LightlineReadonly()        return &readonly && &filetype !=# 'help' ? 'RO' : '''      endfunction    ''';  };''","declared_by":""},{"title":"programs.nixneovim.plugins.lightline.modeMap","description":"Mode name mappings","note":"","type":"null or (attribute set of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-lines.enable","description":"Whether to enable Enable the lsp-lines plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-lines.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-lines.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-lines.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-lines.onlyCurrentLine","description":"Show virtual lines only for the current line's diagnostics","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.enable","description":"Whether to enable Enable the lsp-progress plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.decay","description":"Message decay in milliseconds","note":"","type":"null or signed integer","default":"1000","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.maxSize","description":"Max string length, -1 is unlimited","note":"","type":"null or signed integer","default":"-1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.spinUpdateTime","description":"Spinning update time in milliseconds","note":"","type":"null or signed integer","default":"200","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-progress.spinner","description":"Spinning icon array","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-signature.enable","description":"Whether to enable Enable the lsp-signature plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-signature.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-signature.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lsp-signature.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.enable","description":"Whether to enable Enable the lspconfig plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.coqSupport","description":"Coq requires a special LSP setup (https://github.com/ms-jpq/coq_nvim#lsp). This automatically set to true when activating the coq plugin.","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.onAttach","description":"A lua function to be run when a new LSP buffer is attached. The argument `client` and `bufnr` is provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.preConfig","description":"Code to be run before loading the LSP plugin. Useful for requiring plugins","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.bashls","description":"Module for the bashls (${pkgs.nodePackages.bash-language-server} ${pkgs.shellcheck}) lsp server for nvim-lsp. Languages: Bash","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.bashls.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.bashls.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.bashls.onAttachExtra","description":"A lua function to be run when bashls is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.clangd","description":"Module for the clangd (${pkgs.clang-tools}) lsp server for nvim-lsp. Languages: C, C++","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.clangd.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.clangd.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.clangd.onAttachExtra","description":"A lua function to be run when clangd is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.cssls","description":"Module for the cssls (${pkgs.nodePackages.vscode-langservers-extracted}) lsp server for nvim-lsp. Languages: CSS","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.cssls.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.cssls.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.cssls.onAttachExtra","description":"A lua function to be run when cssls is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.eslint","description":"Module for the eslint (${pkgs.nodePackages.vscode-langservers-extracted}) lsp server for nvim-lsp. Languages: eslint","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.eslint.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.eslint.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.eslint.onAttachExtra","description":"A lua function to be run when eslint is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gdscript","description":"Module for the gdscript () lsp server for nvim-lsp. Languages: Godot","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gdscript.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gdscript.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gdscript.onAttachExtra","description":"A lua function to be run when gdscript is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gopls","description":"Module for the gopls (${pkgs.gopls}) lsp server for nvim-lsp. Languages: Go","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gopls.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gopls.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.gopls.onAttachExtra","description":"A lua function to be run when gopls is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.hls","description":"Module for the hls (${pkgs.haskell-language-server} ${pkgs.ghc}) lsp server for nvim-lsp. Languages: Haskell","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.hls.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.hls.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.hls.onAttachExtra","description":"A lua function to be run when hls is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.html","description":"Module for the html (${pkgs.nodePackages.vscode-langservers-extracted}) lsp server for nvim-lsp. Languages: HTML","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.html.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.html.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.html.onAttachExtra","description":"A lua function to be run when html is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.jsonls","description":"Module for the jsonls (${pkgs.nodePackages.vscode-langservers-extracted}) lsp server for nvim-lsp. Languages: JSON","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.jsonls.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.jsonls.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.jsonls.onAttachExtra","description":"A lua function to be run when jsonls is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.kotlin-language-server","description":"Module for the kotlin-language-server (${pkgs.kotlin-language-server}) lsp server for nvim-lsp. Languages: Kotlin","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.kotlin-language-server.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.kotlin-language-server.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.kotlin-language-server.onAttachExtra","description":"A lua function to be run when kotlin-language-server is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ltex","description":"Module for the ltex (${pkgs.ltex-ls}) lsp server for nvim-lsp. Languages: text files","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ltex.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ltex.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ltex.onAttachExtra","description":"A lua function to be run when ltex is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.lua-language-server","description":"Module for the lua-language-server (${pkgs.lua-language-server}) lsp server for nvim-lsp. Languages: Lua","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.lua-language-server.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.lua-language-server.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.lua-language-server.onAttachExtra","description":"A lua function to be run when lua-language-server is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.nil","description":"Module for the nil (${pkgs.nil}) lsp server for nvim-lsp. Languages: Nix","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.nil.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.nil.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.nil.onAttachExtra","description":"A lua function to be run when nil is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ocamllsp","description":"Module for the ocamllsp (${pkgs.ocamlPackages.ocaml-lsp}) lsp server for nvim-lsp. Languages: OCaml","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ocamllsp.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ocamllsp.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ocamllsp.onAttachExtra","description":"A lua function to be run when ocamllsp is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.pyright","description":"Module for the pyright (${pkgs.pyright}) lsp server for nvim-lsp. Languages: Python","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.pyright.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.pyright.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.pyright.onAttachExtra","description":"A lua function to be run when pyright is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ruff-lsp","description":"Module for the ruff-lsp (${pkgs.ruff-lsp}) lsp server for nvim-lsp. Languages: Python","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ruff-lsp.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ruff-lsp.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.ruff-lsp.onAttachExtra","description":"A lua function to be run when ruff-lsp is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.rust-analyzer","description":"Module for the rust-analyzer (${pkgs.cargo} ${pkgs.rust-analyzer} ${pkgs.rustc}) lsp server for nvim-lsp. Languages: Rust","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.rust-analyzer.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.rust-analyzer.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.rust-analyzer.onAttachExtra","description":"A lua function to be run when rust-analyzer is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.svelte-language-server","description":"Module for the svelte-language-server (${pkgs.nodePackages.svelte-language-server}) lsp server for nvim-lsp. Languages: svelte","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.svelte-language-server.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.svelte-language-server.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.svelte-language-server.onAttachExtra","description":"A lua function to be run when svelte-language-server is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.taplo","description":"Module for the taplo (${pkgs.taplo}) lsp server for nvim-lsp. Languages: TOML","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.taplo.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.taplo.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.taplo.onAttachExtra","description":"A lua function to be run when taplo is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.terraform-ls","description":"Module for the terraform-ls (${pkgs.terraform-ls}) lsp server for nvim-lsp. Languages: HCL","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.terraform-ls.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.terraform-ls.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.terraform-ls.onAttachExtra","description":"A lua function to be run when terraform-ls is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.texlab","description":"Module for the texlab (${pkgs.texlab}) lsp server for nvim-lsp. Languages: latex","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.texlab.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.texlab.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.texlab.onAttachExtra","description":"A lua function to be run when texlab is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typescript-language-server","description":"Module for the typescript-language-server (${pkgs.nodePackages.typescript-language-server}) lsp server for nvim-lsp. Languages: typescript","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typescript-language-server.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typescript-language-server.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typescript-language-server.onAttachExtra","description":"A lua function to be run when typescript-language-server is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typst-lsp","description":"Module for the typst-lsp (${pkgs.typst-lsp}) lsp server for nvim-lsp. Languages: Typst","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typst-lsp.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typst-lsp.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.typst-lsp.onAttachExtra","description":"A lua function to be run when typst-lsp is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.vuels","description":"Module for the vuels (${pkgs.nodePackages.vue-language-server}) lsp server for nvim-lsp. Languages: Vue","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.vuels.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.vuels.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.vuels.onAttachExtra","description":"A lua function to be run when vuels is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.zls","description":"Module for the zls (${pkgs.zig} ${pkgs.zls}) lsp server for nvim-lsp. Languages: Zig","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.zls.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.zls.extraConfig","description":"Extra config passed lsp setup function after `on_attach`","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspconfig.servers.zls.onAttachExtra","description":"A lua function to be run when zls is attached. The argument `client` and `bufnr` are provided.","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspkind.enable","description":"Whether to enable Enable the lspkind plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspkind.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspkind.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspkind.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspkind.mode","description":"Defines how annotations are shown","note":"","type":"one of \"text\", \"text_symbol\", \"symbol_text\", \"symbol\"","default":"\"symbol_text\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.enable","description":"Whether to enable Enable the lspsaga plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.beacon.enable","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.beacon.frequency","description":"","note":"","type":"null or signed integer","default":"7","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.keys.edit","description":"","note":"","type":"null or string","default":"\"e\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.keys.expandCollapse","description":"","note":"","type":"null or string","default":"\"u\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.keys.jump","description":"","note":"","type":"null or string","default":"\"o\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.keys.quit","description":"","note":"","type":"null or string","default":"\"q\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.keys.split","description":"","note":"","type":"null or string","default":"\"i\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.keys.tabe","description":"","note":"","type":"null or string","default":"\"t\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.keys.vsplit","description":"","note":"","type":"null or string","default":"\"s\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.callhierarchy.showDetail","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.codeAction.extendGitsigns","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.codeAction.keys.exec","description":"","note":"","type":"null or string","default":"\"<CR>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.codeAction.keys.quit","description":"","note":"","type":"null or string","default":"\"q\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.codeAction.numShortcut","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.definition.edit","description":"","note":"","type":"null or string","default":"\"<C-c>o\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.definition.quit","description":"","note":"","type":"null or string","default":"\"q\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.definition.split","description":"","note":"","type":"null or string","default":"\"<C-c>i\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.definition.tabe","description":"","note":"","type":"null or string","default":"\"<C-c>t\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.definition.vsplit","description":"","note":"","type":"null or string","default":"\"<C-c>v\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.diagnostic.jumpNumShortcut","description":"After jumping, Lspasga will automatically bind code actions to a number. Afterwards, you can press the number to execute the code action. After the floating window is closed, these numbers will no longer be tied to the same code actions.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.diagnostic.keys.execAction","description":"","note":"","type":"null or string","default":"\"o\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.diagnostic.keys.expandOrJump","description":"","note":"","type":"null or string","default":"\"<CR>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.diagnostic.keys.quit","description":"","note":"","type":"null or string","default":"\"q\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.diagnostic.keys.quitInShow","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.diagnostic.showCodeAction","description":"It will show available actions in the diagnsotic jump window.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.diagnostic.showSource","description":"Extend source into the diagnostic message.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.closeInPreview","description":"","note":"","type":"null or string","default":"\"<ESC>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.expandOrJump","description":"","note":"","type":"null or string","default":"\"o\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.jumpTo","description":"Finder peek window.","note":"","type":"null or string","default":"\"p\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.quit","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.split","description":"","note":"","type":"null or string","default":"\"i\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.tabe","description":"","note":"","type":"null or string","default":"\"t\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.tabnew","description":"","note":"","type":"null or string","default":"\"r\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.finder.keys.vsplit","description":"","note":"","type":"null or string","default":"\"s\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.hover.openBrowser","description":"","note":"","type":"null or string","default":"\"!chrome\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.hover.openLink","description":"","note":"","type":"null or string","default":"\"gx\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.lightbulb.enable","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.lightbulb.enableInInsert","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.lightbulb.sign","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.lightbulb.virtualText","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.autoClose","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.autoPreview","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.autoRefresh","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.autoResize","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.closeAfterJump","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.keys.expandOrJump","description":"","note":"","type":"null or string","default":"\"o\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.keys.quit","description":"","note":"","type":"null or string","default":"\"q\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.outline.winPosition","description":"","note":"","type":"null or string","default":"\"right\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.preview.linesAbove","description":"","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.preview.linesBelow","description":"","note":"","type":"null or signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.rename.exec","description":"","note":"","type":"null or string","default":"\"<CR>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.rename.inSelect","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.rename.quit","description":"","note":"","type":"null or string","default":"\"<C-c>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.requestTimeout","description":"","note":"","type":"null or signed integer","default":"2000","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.scrollPreview.scrollDown","description":"","note":"","type":"null or string","default":"\"<C-f>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.scrollPreview.scrollUp","description":"","note":"","type":"null or string","default":"\"<C-b>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.symbolInWinbar.enable","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.symbolInWinbar.colorMode","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.symbolInWinbar.separator","description":"","note":"","type":"null or string","default":"\" \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lspsaga.symbolInWinbar.showFile","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ltex-extra.enable","description":"Whether to enable Enable the ltex-extra plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.ltex-extra.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ltex-extra.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ltex-extra.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.enable","description":"Whether to enable lualine.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.alwaysDivideMiddle","description":"When true, left_sections (a,b,c) can't take over entire statusline","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.componentSeparators","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.componentSeparators.left","description":"left separator","note":"","type":"string","default":"\" \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.componentSeparators.right","description":"right separator","note":"","type":"string","default":"\" \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.disabledFiletypes","description":"filetypes to disable lualine on","note":"","type":"null or (list of string)","default":"null","example":"\"[ \\\"lua\\\" ]\"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.extensions","description":"list of enabled extensions","note":"","type":"null or (list of string)","default":"null","example":"\"[ \\\"fzf\\\" ]\"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.globalstatus","description":"Use one global line for all windows","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.refresh.statusline","description":"","note":"","type":"null or signed integer","default":"1000","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.refresh.tabline","description":"","note":"","type":"null or signed integer","default":"1000","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.refresh.winbar","description":"","note":"","type":"null or signed integer","default":"1000","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sectionSeparators","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sectionSeparators.left","description":"left separator","note":"","type":"string","default":"\" \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sectionSeparators.right","description":"right separator","note":"","type":"string","default":"\" \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sections","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sections.lualine_a","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"mode\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sections.lualine_b","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"branch\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sections.lualine_c","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"filename\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sections.lualine_x","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"encoding\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sections.lualine_y","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"progress\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.sections.lualine_z","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"location\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.tabline","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.tabline.lualine_a","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.tabline.lualine_b","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.tabline.lualine_c","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.tabline.lualine_x","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.tabline.lualine_y","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.tabline.lualine_z","description":"","note":"","type":"null or (list of (string or (attribute set)))","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.lualine.theme","description":"The theme to use for lualine-nvim.","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.enable","description":"Whether to enable Enable the luasnip plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.enableLua","description":"Load LuaSnip snippets","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.enableSnipmate","description":"Load Snimate snippets","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.lazyLoad","description":"lazy load snippets","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.luasnip.path","description":"Specifies the path where snippets are loaded from","note":"","type":"null or string","default":"\"./snippets\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.enable","description":"Whether to enable Enable the magma plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.magma.automaticallyOpenOutput","description":"If this is true, then whenever you have an active cell its output window will beautomatically shown.If this is false, then the output window will only be automatically shown when you've justevaluated the code.So, if you take your cursor out of the cell, and then come back, the output window won'tbe opened (but the cell will be highlighted).This means that there will be nothing covering your code.You can then open the output window at will using `:MagmaShowOutput`.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.cellHighlightGroup","description":"The highlight group to be used for highlighting cells.","note":"","type":"null or string","default":"\"CursorLine\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.imageProvider","description":"This configures how to display images. The following options are available:  - \"none\" -- don't show images.  - \"ueberzug\" -- use Ueberzug to display images.  - \"kitty\" -- use the Kitty protocol to display images.","note":"","type":"null or one of \"none\", \"ueberzug\", \"kitty\"","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.outputWindowBorders","description":"If this is true, then the output window will have rounded borders.If it is false, it will have no borders.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.savePath","description":"Where to save/load with :MagmaSave and :MagmaLoad (with no parameters).The generated file is placed in this directory, with the filename itself being thebuffer's name, with % replaced by %% and \\/ replaced by %, and postfixed with the extension.json.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.showMimetypeDebug","description":"If this is true, then before any non-iostream output chunk, Magma shows the mimetypes itreceived for it.This is meant for debugging and adding new mimetypes.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.magma.wrapOutput","description":"If this is true, then text output in the output window will be wrapped(akin to `set wrap`).","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mark-radar.enable","description":"Whether to enable mark-radar.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mark-radar.background_highlight_group","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mark-radar.highlight_background","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mark-radar.highlight_group","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mark-radar.set_default_keybinds","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.enable","description":"Whether to enable Enable the markdown-preview plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.autoClose","description":"Auto close current preview window when change from markdown buffer to another buffer","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.autoStart","description":"Open the preview window after entering the markdown buffer","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.browser","description":"The browser to open the preview page","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.browserFunc","description":"A custom vim function name to open preview page. This function will receive url as param.","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.commandForGlobal","description":"Enable markdown preview for all files (by default, the plugin is only enabled for markdown files)","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.echoPreviewUrl","description":"Echo preview page url in command line when opening the preview page","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.fileTypes","description":"Recognized filetypes. These filetypes will have MarkdownPreview... commands.","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.highlightCss","description":"Custom highlight style. Must be an absolute path like '/Users/username/highlight.css' or expand('~/highlight.css').","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.markdownCss","description":"Custom markdown style. Must be an absolute path like '/Users/username/markdown.css' or expand('~/markdown.css').","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.openIp","description":"Custom IP used to open the preview page. This can be useful when you work in remote vim and preview on local browser.For more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9.","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.openToTheWorld","description":"Make the preview server available to others in your network. By default, the server listens on localhost (127.0.0.1).","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.pageTitle","description":"preview page title. $${name} will be replaced with the file name.","note":"","type":"null or string","default":"\"「$\\${name} 」\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.port","description":"Custom port to start server or empty for random","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.refreshSlow","description":"Refresh markdown when save the buffer or leave from insert mode, default false is auto refresh markdown as you edit or move the cursor","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.markdown-preview.theme","description":"Default theme (dark or light). By default the theme is define according to the preferences of the system.","note":"","type":"null or one of \"dark\", \"light\"","default":"\"dark\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.enable","description":"Whether to enable Enable the mini plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.enable","description":"Whether to enable mini.ai.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.customTextobjects","description":"Attribute set with textobect id as key and textobkect specification as values","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.around","description":"","note":"","type":"null or string","default":"\"a\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.aroundLast","description":"","note":"","type":"null or string","default":"\"al\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.aroundNext","description":"","note":"","type":"null or string","default":"\"an\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.gotoLeft","description":"","note":"","type":"null or string","default":"\"g[\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.gotoRight","description":"","note":"","type":"null or string","default":"\"g]\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.inside","description":"","note":"","type":"null or string","default":"\"i\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.insideLast","description":"","note":"","type":"null or string","default":"\"il\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.mappings.insideNext","description":"","note":"","type":"null or string","default":"\"in\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.nLines","description":"Number of lines within which textobject is searched","note":"","type":"null or signed integer","default":"50","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.ai.searchMethod","description":"","note":"","type":"one of \"cover\", \"cover_or_next\", \"cover_or_prev\", \"cover_or_nearest\", \"next\", \"previous\", \"nearest\"","default":"\"cover_or_next\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.align.enable","description":"Whether to enable mini.align.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.align.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.animate.enable","description":"Whether to enable mini.animate.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.animate.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.base16.enable","description":"Whether to enable mini.base16.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.base16.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.basics.enable","description":"Whether to enable mini.basics.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.basics.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.bracketed.enable","description":"Whether to enable mini.bracketed.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.bracketed.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.bufremove.enable","description":"Whether to enable mini.bufremove.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.bufremove.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.clue.enable","description":"Whether to enable mini.clue.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.clue.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.colors.enable","description":"Whether to enable mini.colors.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.colors.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.comment.enable","description":"Whether to enable mini.comment.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.comment.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.completion.enable","description":"Whether to enable mini.completion.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.completion.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.cursorword.enable","description":"Whether to enable mini.cursorword.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.cursorword.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.doc.enable","description":"Whether to enable mini.doc.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.doc.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.files.enable","description":"Whether to enable mini.files.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.files.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.fuzzy.enable","description":"Whether to enable mini.fuzzy.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.fuzzy.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.hlpatterns.enable","description":"Whether to enable mini.hlpatterns.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.hlpatterns.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.hues.enable","description":"Whether to enable mini.hues.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.hues.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.indentscope.enable","description":"Whether to enable mini.indentscope.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.indentscope.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.jump.enable","description":"Whether to enable mini.jump.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.jump.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.jump2d.enable","description":"Whether to enable mini.jump2d.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.jump2d.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.map.enable","description":"Whether to enable mini.map.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.map.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.misc.enable","description":"Whether to enable mini.misc.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.misc.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.move.enable","description":"Whether to enable mini.move.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.move.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.operators.enable","description":"Whether to enable mini.operators.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.operators.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.pairs.enable","description":"Whether to enable mini.pairs.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.pairs.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.sessions.enable","description":"Whether to enable mini.sessions.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.sessions.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.splitjoin.enable","description":"Whether to enable mini.splitjoin.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.splitjoin.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.starter.enable","description":"Whether to enable mini.starter.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.starter.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.statusline.enable","description":"Whether to enable mini.statusline.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.statusline.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.surround.enable","description":"Whether to enable mini.surround.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.surround.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.tabline.enable","description":"Whether to enable mini.tabline.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.tabline.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.tabline.setVimSettings","description":"Whether to set Vim's settings for tabline (make it always shown and allow hidden buffers)","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.tabline.showIcons","description":"Whether to show file icons (requires 'kyazdani42/nvim-web-devicons')","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.tabline.tabpageSection","description":"Where to show tabpage section in cae of multiple vim tabpages","note":"","type":"null or one of \"left\", \"right\", \"none\"","default":"\"left\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.test.enable","description":"Whether to enable mini.test.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.test.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.mini.trailspace.enable","description":"Whether to enable mini.trailspace.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.mini.trailspace.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.enable","description":"Whether to enable neogit.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.autoRefresh","description":"Enable Auto Refresh","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.commitPopup","description":"Commit popup configuration","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.commitPopup.kind","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.disableBuiltinNotifications","description":"Disable builtin notifications","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.disableCommitConfirmation","description":"Disable the commit confirmation prompt","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.disableContextHighlighting","description":"Disable the context highlighting","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.disableHint","description":"Disable hint","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.disableSigns","description":"Disable signs","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.integrations","description":"Tools integration","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.integrations.diffview","description":"Enable diff popup","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.kind","description":"The way of opening neogit","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.mappings","description":"Custom mappings","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.mappings.status","description":"","note":"","type":"null or (attribute set of (one of \"Close\", \"Depth1\", \"Depth2\", \"Depth3\", \"Depth4\", \"Toggle\", \"Discard\", \"Stage\", \"StageUnstaged\", \"StageAll\", \"GoToFile\", \"Unstaged\", \"UnstagedStage\", \"CommandHistory\", \"RefreshBuffer\", \"HelpPopup\", \"PullPopup\", \"PushPopup\", \"CommitPopup\", \"LogPopup\", \"StashPopup\", \"BranchPopup\"))","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections","description":"Section configuration","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.recent","description":"Options for recent commits section","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.recent.folded","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.staged","description":"Options for staged section","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.staged.folded","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.stashes","description":"Options for stashes section","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.stashes.folded","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.unmerged","description":"Options for unmerged section","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.unmerged.folded","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.unpulled","description":"Options for unpulled section","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.unpulled.folded","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.unstaged","description":"Options for unstaged section","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.unstaged.folded","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.untracked","description":"Options for untracked section","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.sections.untracked.folded","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.signs","description":"Customize displayed signs","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.signs.hunk","description":"Cosed and opened signs for hunks","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.signs.item","description":"Cosed and opened signs for items","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.signs.section","description":"Cosed and opened signs for sections","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.neogit.useMagitKeybindings","description":"Enable Magit keybindings","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.enable","description":"Whether to enable Enable the nerdcommenter plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.compactSexyComs","description":"Use compact syntax for prettified multi-line comments","note":"","type":"null or signed integer","default":"1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.createDefaultMappings","description":"Create default mappings","note":"","type":"null or signed integer","default":"1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.defaultAlign","description":"Align line-wise comment delimiters flush left instead of following code indentation","note":"","type":"null or one of \"none\", \"left\", \"start\", \"both\"","default":"\"left\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nerdcommenter.spaceDelims","description":"Add spaces after comment delimiters by default","note":"","type":"null or signed integer","default":"1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nest.enable","description":"Whether to enable Enable the nest plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nest.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nest.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nest.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nix.enable","description":"Whether to enable Enable the nix plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nix.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nix.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nix.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.enable","description":"Whether to enable notify.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.notify.backgroundColor","description":"For stages that change opacity this is treated as the highlight between the window","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.icons","description":"Icons for the different levels","note":"","type":"null or (submodule)","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.icons.debug","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.icons.error","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.icons.info","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.icons.trace","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.icons.warn","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.minimumWidth","description":"Minimum width for notification windows","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.stages","description":"Animation style","note":"","type":"null or one of \"fade_in_slide_out\", \"fade\", \"slide\", \"static\"","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.notify.timeout","description":"Default timeout for notifications","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.enable","description":"Whether to enable null-ls.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.debug","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.alejandra.enable","description":"Whether to enable Enable alejandra source, for null-ls..","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.alejandra.withArgs","description":"Raw Lua code to be called with the with function","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.flake8.enable","description":"Whether to enable Enable flake8 source, for null-ls..","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.flake8.withArgs","description":"Raw Lua code to be called with the with function","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.nixfmt.enable","description":"Whether to enable Enable nixfmt source, for null-ls..","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.nixfmt.withArgs","description":"Raw Lua code to be called with the with function","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.prettier.enable","description":"Whether to enable Enable prettier source, for null-ls..","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sources.formatting.prettier.withArgs","description":"Raw Lua code to be called with the with function","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.null-ls.sourcesItems","description":"The list of sources to enable, should be strings of lua code. Don't use this directly","note":"","type":"null or (list of attribute set of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.numb.enable","description":"Whether to enable Enable the numb plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.numb.centeredPeeking","description":"Peeked line will be centered relative to window","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.numb.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.numb.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.numb.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.numb.numberOnly","description":"Peek only when the command is only a number instead of when it starts with a number","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.numb.showCursorline","description":"Enable 'cursorline' for the window while peeking","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.numb.showNumbers","description":"Enable 'number' for the window while peeking","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-autopairs.enable","description":"Whether to enable nvim-autopairs.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-autopairs.breakLineFiletypes","description":"Filetypes to break lines on","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-autopairs.disabledFiletypes","description":"Disabled filetypes","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-autopairs.htmlFiletypes","description":"Filetypes to treat as HTML","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-autopairs.ignoredNextChar","description":"Regexp to ignore if it matches the next character","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-autopairs.pairs","description":"Characters to pair up","note":"","type":"null or (attribute set of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.enable","description":"Whether to enable nvim-cmp.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.completion","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.completion.autocomplete","description":"Lua code for the event.","note":"","type":"null or string","default":"null","example":"\"\\\"false\\\"\"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.completion.completeopt","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.completion.keyword_length","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.completion.keyword_pattern","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.confirmation","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.confirmation.get_commit_characters","description":"Direct lua code as a string","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.experimental","description":"Experimental features","note":"","type":"null or (attribute set)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.formatting","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.formatting.fields","description":"","note":"","type":"null or (list of string)","default":"null","example":"\"[ \\\"kind\\\" \\\"abbr\\\" \\\"menu\\\" ]\"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.formatting.format","description":"A lua function as a string","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.mapping","description":"","note":"","type":"null or (attribute set of (string or (submodule)))","default":"{ }","example":"''  {    \"<CR>\" = \"cmp.mapping.confirm({ select = true })\";    \"<Tab>\" = {      modes = [ \"i\" \"s\" ];      action = '''        function(fallback)          if cmp.visible() then            cmp.select_next_item()          elseif luasnip.expandable() then            luasnip.expand()          elseif luasnip.expand_or_jumpable() then            luasnip.expand_or_jump()          elseif check_backspace() then            fallback()          else            fallback()          end        end      ''';    };  }''","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.mappingPresets","description":"Mapping presets to use; cmp.mapping.preset.${mappingPreset} will be called with the configured mappings","note":"","type":"list of (one of \"insert\", \"cmdline\")","default":"[ ]","example":"''  [ \"insert\" \"cmdline\" ]''","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.matching","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.matching.disallow_fuzzy_matching","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.matching.disallow_partial_matching","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.matching.disallow_prefix_unmatching","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.performance","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.performance.debounce","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.performance.throttle","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.preselect","description":"","note":"","type":"null or one of \"Item\", \"None\"","default":"null","example":"\"\\\"Item\\\"\"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.snippet","description":"","note":"","type":"submodule","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.snippet.luasnip","description":"","note":"","type":"submodule","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.snippet.luasnip.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sorting","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sorting.comparators","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sorting.priority_weight","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer","description":"Module for the buffer source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.buffer.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc","description":"Module for the calc source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.calc.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline","description":"Module for the cmdline source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmdline.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy","description":"Module for the cmp-clippy source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-clippy.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history","description":"Module for the cmp-cmdline-history source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp-cmdline-history.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc","description":"Module for the cmp_pandoc source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_pandoc.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine","description":"Module for the cmp_tabnine source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.cmp_tabnine.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits","description":"Module for the conventionalcommits source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.conventionalcommits.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot","description":"Module for the copilot source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.copilot.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates","description":"Module for the crates source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.crates.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap","description":"Module for the dap source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dap.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary","description":"Module for the dictionary source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.dictionary.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs","description":"Module for the digraphs source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.digraphs.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji","description":"Module for the emoji source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.emoji.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish","description":"Module for the fish source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fish.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer","description":"Module for the fuzzy_buffer source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_buffer.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path","description":"Module for the fuzzy_path source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.fuzzy_path.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git","description":"Module for the git source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.git.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek","description":"Module for the greek source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.greek.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols","description":"Module for the latex_symbols source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.latex_symbols.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look","description":"Module for the look source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.look.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip","description":"Module for the luasnip source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.luasnip.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm","description":"Module for the npm source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.npm.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp","description":"Module for the nvim_lsp source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol","description":"Module for the nvim_lsp_document_symbol source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_document_symbol.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help","description":"Module for the nvim_lsp_signature_help source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lsp_signature_help.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua","description":"Module for the nvim_lua source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.nvim_lua.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni","description":"Module for the omni source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.omni.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references","description":"Module for the pandoc_references source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.pandoc_references.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path","description":"Module for the path source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.path.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg","description":"Module for the rg source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.rg.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy","description":"Module for the snippy source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.snippy.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell","description":"Module for the spell source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.spell.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux","description":"Module for the tmux source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.tmux.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter","description":"Module for the treesitter source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.treesitter.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips","description":"Module for the ultisnips source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.ultisnips.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp","description":"Module for the vim_lsp source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vim_lsp.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags","description":"Module for the vimwiki-tags source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vimwiki-tags.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip","description":"Module for the vsnip source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.vsnip.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh","description":"Module for the zsh source for nvim-cmp","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.enable","description":"Whether to enable .","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.entryFilter","description":"A source-specific entry filter, with the following function signature:>  function(entry: cmp.Entry, ctx: cmp.Context): boolean<  Returning `true` will keep the entry, while returning `false` will remove it.  This can be used to hide certain entries from a given source. For instance, you  could hide all entries with kind `Text` from the `nvim_lsp` filter using the  following source definition:>lua  {    name = 'nvim_lsp',    entry_filter = function(entry, ctx)      return require('cmp.types').lsp.CompletionItemKind[entry:get_kind()] ~= 'Text'    end  }<  Using the `ctx` parameter, you can further customize the behaviour of the  source.","note":"","type":"rawLuaType","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.groupIndex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.keywordLength","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.keywordPattern","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.maxItemCount","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.option","description":"If direct lua code is needed use helpers.mkRaw","note":"","type":"null or (attribute set of anything)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.priority","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.sources.zsh.triggerCharacters","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.view","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.view.entries","description":"","note":"","type":"null or string or (attribute set)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.completion","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.completion.border","description":"","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.completion.winhighlight","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.completion.zindex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.documentation","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.documentation.border","description":"","note":"","type":"null or string or list of string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.documentation.max_height","description":"Window's max height","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.documentation.max_width","description":"Window's max width","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.documentation.winhighlight","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-cmp.window.documentation.zindex","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.enable","description":"Whether to enable Enable the nvim-dap plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.adapters.rust","description":"","note":"","type":"null or (submodule)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.adapters.rust.args","description":"","note":"","type":"list of string","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.adapters.rust.command","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.adapters.rust.type","description":"","note":"","type":"one of \"executable\", \"server\"","default":"\"executable\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap-ui.enable","description":"Whether to enable Enable the nvim-dap-ui plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap-ui.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap-ui.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-dap-ui.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.enable","description":"Whether to enable Enable the nvim-jqx plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.closeWindowKey","description":"Key to close floating window","note":"","type":"null or string","default":"\"<ESC>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.queryKey","description":"Key to open query in floating window","note":"","type":"null or string","default":"\"X\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.sort","description":"Sort keys alphabetical","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-jqx.useQuickfix","description":"Use location list instead of quickfix","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.enable","description":"Whether to enable Enable the nvim-lightbulb plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.ignore","description":"LSP client names to ignore","note":"","type":"null or (attribute set of anything)","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.sign.enable","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.sign.priority","description":"Priority of the gutter sign","note":"","type":"null or signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.virtual_text.enabled","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.virtual_text.hlMode","description":"highlight mode to use for virtual text (replace, combine, blend), see :help nvim_buf_set_extmark() for reference","note":"","type":"null or one of \"replace\", \"combine\", \"blend\"","default":"\"replace\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-lightbulb.virtual_text.text","description":"Text to show at virtual text","note":"","type":"null or string","default":"\"💡\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-toggler.enable","description":"Whether to enable Enable the nvim-toggler plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-toggler.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-toggler.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-toggler.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-toggler.inverses","description":"Add set of items to toggle like `['vim'] = 'emacs'`","note":"","type":"null or (attribute set of anything)","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-toggler.removeDefaultKeybinds","description":"Removes the default leader-i keymap","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.enable","description":"Whether to enable Enable the nvim-tree plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.autoClose","description":"Automatically close","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.diagnostics.enable","description":"Enable diagnostics","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.diagnostics.icons.error","description":"Error","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.diagnostics.icons.hint","description":"Hints","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.diagnostics.icons.info","description":"Info","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.diagnostics.icons.warning","description":"Warning","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.disableNetrw","description":"Disable netrw","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.filters.custom","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.filters.dotfiles","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.git.enable","description":"Enable git integration","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.git.ignore","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.git.timeout","description":"","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.hijackCursor","description":"Hijack cursor","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.hijackDirectories.enable","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.hijackDirectories.autoOpen","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.hijackNetrw","description":"Hijack netrw","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.ignoreFtOnSetup","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.openOnSetup","description":"Open on setup","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.openOnTab","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.syncRootWithCwd","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.systemOpen.args","description":"","note":"","type":"null or (list of string)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.systemOpen.cmd","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.trash.cmd","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.trash.requireConfirm","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.updateCwd","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.updateFocusedFile.enable","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.updateFocusedFile.ignoreList","description":"","note":"","type":"null or (list of boolean)","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.updateFocusedFile.updateCwd","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.autoResize","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.height","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.hideRootFolder","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.number","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.relativenumber","description":"","note":"","type":"null or boolean","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.side","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.signcolumn","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.nvim-tree.view.width","description":"","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.enable","description":"Whether to enable Enable the oil plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.oil.bufOptions.buflisted","description":"Buffer-local options to use for oil buffers","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.columns","description":"Other options are \"permissions\" \"size\" \"mtime\"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.defaultFileExplorer","description":"Oil will take over directory buffers (e.g. `vim .` or `:e src/`","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.deleteToTrash","description":"Deleted files will be removed with the `trash-put` command.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.float.border","description":"Padding around the floating window","note":"","type":"null or string","default":"\"rounded\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.float.maxHeight","description":"Padding around the floating window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.float.maxWidth","description":"Padding around the floating window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.float.padding","description":"Padding around the floating window","note":"","type":"null or signed integer","default":"2","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.float.winOptions.winblend","description":"Padding around the floating window","note":"","type":"null or signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.preview.border","description":"optionally define an integer/float for the exact height of the preview window","note":"","type":"null or string","default":"\"rounded\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.preview.maxHeight","description":"max_height = [80, 0.9] means \"the lesser of 80 columns or 90% of total\"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.preview.maxWidth","description":"max_width = [100, 0.8] means \"the lesser of 100 columns or 80% of total\"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.preview.minHeight","description":"min_height = [5, 0.1] means \"the greater of 5 columns or 10% of total\"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.preview.minWidth","description":"min_width = [40, 0.4] means \"the greater of 40 columns or 40% of total\"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.preview.winOptions.winblend","description":"optionally define an integer/float for the exact height of the preview window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.progress.border","description":"Configuration for the floating progress window","note":"","type":"null or string","default":"\"rounded\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.progress.maxHeight","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.progress.maxWidth","description":"Configuration for the floating progress window","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.progress.minHeight","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.progress.minWidth","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.progress.minimizedBorder","description":"Configuration for the floating progress window","note":"","type":"null or string","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.progress.winOptions.winblend","description":"Configuration for the floating progress window","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.promptSaveOnSelectNewEntry","description":"Selecting a new/moved/renamed file or directory will prompt you to save changes first","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.restoreWinOptions","description":"Restore window options to previous values when leaving an oil buffer","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.skipConfirmForSimpleEdits","description":"Skip the confirmation popup for simple operations","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.useDefaultKeymaps","description":"Set to false to disable all of the above keymaps","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.viewOptions.showHidden","description":"Show files and directories that start with \".\"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.concealcursor","description":"Window-local options to use for oil buffers","note":"","type":"null or string","default":"\"n\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.conceallevel","description":"Window-local options to use for oil buffers","note":"","type":"null or signed integer","default":"3","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.cursorcolumn","description":"Window-local options to use for oil buffers","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.foldcolumn","description":"Window-local options to use for oil buffers","note":"","type":"null or string","default":"\"0\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.list","description":"Window-local options to use for oil buffers","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.signcolumn","description":"Window-local options to use for oil buffers","note":"","type":"null or string","default":"\"no\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.spell","description":"Window-local options to use for oil buffers","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.oil.winOptions.wrap","description":"Window-local options to use for oil buffers","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.origami.enable","description":"Whether to enable Enable the origami plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.origami.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.origami.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.origami.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.origami.keepFoldsAcrossSessions","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.origami.pauseFoldsOnSearch","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.origami.setupFoldKeymaps","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.plantuml-syntax.enable","description":"Whether to enable Enable the plantuml-syntax plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.plantuml-syntax.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.plantuml-syntax.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.plantuml-syntax.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.plenary.enable","description":"Whether to enable Enable the plenary plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.plenary.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.plenary.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.plenary.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.enable","description":"Whether to enable Enable the project-nvim plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.datapath","description":"","note":"","type":"string","default":"\"vim.fn.stdpath(\\\"data\\\")\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.detectionMethods","description":"","note":"","type":"list of string","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.excludeDirs","description":"","note":"","type":"list of string","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.ignoreLsp","description":"","note":"","type":"list of string","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.manualMode","description":"Do not automatically change root directory","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.patterns","description":"","note":"","type":"list of string","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.scopeChdir","description":"Scope for which the directory is changed","note":"","type":"null or one of \"global\", \"tab\", \"win\"","default":"\"global\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.showHidden","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.project-nvim.silentChdir","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.enable","description":"Whether to enable Enable the rust-tools plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.dap.adapter.command","description":"debugging stuff","note":"","type":"null or string","default":"\"lldb-vscode\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.dap.adapter.name","description":"debugging stuff","note":"","type":"null or string","default":"\"rt_lldb\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.dap.adapter.type","description":"debugging stuff","note":"","type":"null or string","default":"\"executable\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.server","description":"","note":"","type":"rawLuaType","default":"","example":"''  mkRaw \\'\\'{    [\"on_attach\"] = function()      -- custom lsp code      -- custom rust-tools code    end  }  \\'\\'''","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.crateGraph.enabledGraphvizBackends","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.crateGraph.backend","description":"","note":"","type":"null or string","default":"\"x11\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.crateGraph.full","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.hoverActions.autoFocus","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.auto","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.highlight","description":"The color of the hints","note":"","type":"null or string","default":"\"Comment\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.maxLenAlign","description":"whether to align to the length of the longest line in the file","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.maxLenAlignPadding","description":"padding from the left if max_len_align is true","note":"","type":"null or signed integer","default":"1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.onlyCurrentLine","description":"Only show inlay hints for the current line","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.otherHintsPrefix","description":"","note":"","type":"null or string","default":"\"=> \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.parameterHintsPrefix","description":"","note":"","type":"null or string","default":"\"<- \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.rightAlign","description":"whether to align to the extreme right or not","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.rightAlignPadding","description":"padding from the right if right_align is true","note":"","type":"null or signed integer","default":"7","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.inlayHints.showParameterHints","description":"","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.rust-tools.tools.reloadWorkspaceFromCargoToml","description":"automatically call RustReloadWorkspace when writing to a Cargo.toml file.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.scrollbar.enable","description":"Whether to enable Enable the scrollbar plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.scrollbar.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.scrollbar.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.scrollbar.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.snippy.enable","description":"Whether to enable Enable the snippy plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.snippy.enableAuto","description":"Enable auto expanding snippets","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.snippy.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.snippy.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.snippy.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.snippy.mappings","description":"","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.enable","description":"Whether to enable specs-nvim.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.specs.blend","description":"","note":"","type":"signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.delay","description":"Delay in miliseconds","note":"","type":"signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.fader","description":"","note":"","type":"submodule","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.fader.builtin","description":"","note":"","type":"null or one of \"linear_fader\", \"exp_fader\", \"pulse_fader\", \"empty_fader\"","default":"\"linear_fader\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.fader.custom","description":"","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"''  function(blend, cnt)    if cnt > 100 then        return 80    else return nil end  end''","declared_by":""},{"title":"programs.nixneovim.plugins.specs.ignored_buffertypes","description":"","note":"","type":"list of string","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.ignored_filetypes","description":"","note":"","type":"list of string","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.increment","description":"Increment in miliseconds","note":"","type":"signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.min_jump","description":"","note":"","type":"signed integer","default":"30","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.resizer","description":"","note":"","type":"submodule","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.resizer.builtin","description":"","note":"","type":"null or one of \"shrink_resizer\", \"slide_resizer\", \"empty_resizer\"","default":"\"shrink_resizer\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.resizer.custom","description":"","note":"","type":"strings concatenated with \"\\n\"","default":"\"\"","example":"''  function(width, ccol, cnt)      if width-cnt > 0 then          return {width+cnt, ccol}      else return nil end  end''","declared_by":""},{"title":"programs.nixneovim.plugins.specs.show_jumps","description":"","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.specs.width","description":"","note":"","type":"signed integer","default":"10","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.stabilize.enable","description":"Whether to enable Enable the stabilize plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.stabilize.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.stabilize.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.stabilize.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.stabilize.force","description":"stabilize window even when current cursor position will be hidden behind new window","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.enable","description":"Whether to enable Enable the startify plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.startify.enableSpecial","description":"Show <empty buffer> and <quit>","note":"","type":"null or signed integer","default":"1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.bookmarks","description":"A list of files or directories to bookmark. The list can contain two kinds of types. Either a path or a dictionary whereas the key is the custom index and the value is the path.","note":"","type":"null or (list of anything)","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.changeCmd","description":"The default command for switching directories","note":"","type":"null or one of \"cd\", \"lcd\", \"tcd\"","default":"\"lcd\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.changeToDir","description":"When opening a file or bookmark, change to its directory","note":"","type":"null or signed integer","default":"1","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.changeToVcsRoot","description":"When opening a file or bookmark, seek and change to the root directory of the VCS (if there is one).","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.customheader","description":"Define your own header.","note":"","type":"null or string","default":"\"'startify#pad(startify#fortune#cowsay())'\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.lists","description":"Startify displays lists. Each list consists of a `type` and optionally a `header` and custom `indices`.","note":"","type":"null or (list of anything)","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.skiplist","description":"A list of Vim regular expressions that is used to filter recently used files.","note":"","type":"null or (list of anything)","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.startify.updateOldfiles","description":"Usually |v:oldfiles| only gets updated when Vim exits. Using this option updates it on-the-fly, so that :Startify is always up-to-date.","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.surround.enable","description":"Whether to enable Enable the surround plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.surround.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.surround.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.surround.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tabby.enable","description":"Whether to enable tabby.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.tabby.presets.activeTabWithWins","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tabby.presets.activeWinsAtEnd","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tabby.presets.activeWinsAtTall","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tabby.presets.tabOnly","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tabby.presets.tabWithTopWin","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tagbar.enable","description":"Whether to enable Enable the tagbar plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.tagbar.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tagbar.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.tagbar.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.enable","description":"Whether to enable Enable the telescope plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extensions.manix","description":"Enable the manix telescope extension","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extensions.manix.enable","description":"Whether to enable manix.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extensions.manix.extraConfig","description":"","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extensions.mediaFiles","description":"Enable the mediaFiles telescope extension","note":"","type":"submodule","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extensions.mediaFiles.enable","description":"Whether to enable mediaFiles.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extensions.mediaFiles.extraConfig","description":"","note":"","type":"attribute set","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extensions.mediaFiles.findCmd","description":"","note":"","type":"null or string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.telescope.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.enable","description":"Whether to enable Enable the todo-comments plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.keywords","description":"Keywords recognized as 'todo' comments","note":"","type":"null or (attribute set of (submodule))","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.keywords.&lt;name&gt;.alt","description":"A list of other keywords that map to this keyword","note":"","type":"string or list of string","default":"\"\"","example":"[  \"FIXME\"  \"BUG\"  \"FIXIT\"  \"ISSUE\"]","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.keywords.&lt;name&gt;.color","description":"Can be a hex color or a named color","note":"","type":"null or string","default":"\"error\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.keywords.&lt;name&gt;.icon","description":"Icon used for the sign and in search results","note":"","type":"null or string","default":"\" \"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.mergeKeywords","description":"When true, custom keywords will be merged with the defaults","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.signPriority","description":"sign_priority","note":"","type":"null or signed integer","default":"8","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.todo-comments.signs","description":"Show icons in the signs column","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.enable","description":"Whether to enable Enable the treesitter plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.contextCommentstring.enable","description":"(Deprecated use ts-context-commentstring plugin) Enable the nvim-ts-context-commentstring treesitter module","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.excludeGrammars","description":"","note":"","type":"unspecified value","default":"[ ]","example":"''  [    \"latex-grammar\"    \"go-grammar  ]''","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.folding","description":"Enable tree-sitter based folding","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.grammars","description":"","note":"","type":"list of package","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.incrementalSelection.enable","description":"Whether to enable Incremental selection based on the named nodes from the grammar.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.incrementalSelection.keymaps.initSelection","description":"","note":"","type":"string","default":"\"gnn\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.incrementalSelection.keymaps.nodeDecremental","description":"","note":"","type":"string","default":"\"grm\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.incrementalSelection.keymaps.nodeIncremental","description":"","note":"","type":"string","default":"\"grn\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.incrementalSelection.keymaps.scopeIncremental","description":"","note":"","type":"string","default":"\"grc\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.indent","description":"Enable tree-sitter based indentation (This is the equivalent to indent { enable = true } in the original lua config)","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.installAllGrammars","description":"Install all grammars using nix (recommended, make sure no other grammars are installed)","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.highlightCurrentScope.enable","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.highlightDefinitions.enable","description":"","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.highlightDefinitions.clearOnCursorMove","description":"Set to false if you have an 'updatetime' of 100","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.navigation.enable","description":"Assign keymaps to false to disable them, e.g. 'smart_rename = false'.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.navigation.keymaps.gotoDefinition","description":"Assign keymaps to false to disable them, e.g. 'goto_definition = false'.","note":"","type":"null or string","default":"\"gnd\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.navigation.keymaps.gotoNextUsage","description":"Assign keymaps to false to disable them, e.g. 'goto_definition = false'.","note":"","type":"null or string","default":"\"<a-*>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.navigation.keymaps.gotoPreviousUsage","description":"Assign keymaps to false to disable them, e.g. 'goto_definition = false'.","note":"","type":"null or string","default":"\"<a-#>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.navigation.keymaps.listDefinitions","description":"Assign keymaps to false to disable them, e.g. 'goto_definition = false'.","note":"","type":"null or string","default":"\"gnD\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.navigation.keymaps.listDefinitionsToc","description":"Assign keymaps to false to disable them, e.g. 'goto_definition = false'.","note":"","type":"null or string","default":"\"gO\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.smartRename.enable","description":"Set to false if you have an 'updatetime' of ~100.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter.refactor.smartRename.keymaps.smartRename","description":"Assign keymaps to false to disable them, e.g. 'smart_rename = false'.","note":"","type":"null or string","default":"\"grr\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.enable","description":"Whether to enable Enable the treesitter-context plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.maxLines","description":"Define the limit of context lines. 0 means no limit","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.mode","description":"Which context to show","note":"","type":"null or one of \"cursor\", \"topline\"","default":"\"cursor\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.patterns.default","description":"Which Treesitter nodes to consider","note":"","type":"list of (one of \"class\", \"function\", \"method\", \"for\", \"while\", \"if\", \"switch\", \"case\")","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.treesitter-context.trimScope","description":"When max_lines is reached, which lines to discard","note":"","type":"null or one of \"inner\", \"outer\"","default":"\"outer\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.trouble.enable","description":"Whether to enable trouble.nvim.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.trouble.position","description":"position of the list","note":"","type":"one of \"bottom\", \"top\", \"left\", \"right\"","default":"\"bottom\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ts-context-commentstring.enable","description":"Whether to enable Enable the ts-context-commentstring plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.ts-context-commentstring.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ts-context-commentstring.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ts-context-commentstring.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.typst.enable","description":"Whether to enable Enable the typst plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.typst.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.typst.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.typst.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ufo.enable","description":"Whether to enable Enable the ufo plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.ufo.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ufo.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.ufo.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.enable","description":"Whether to enable undotree.","note":"","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.autoOpenDiff","description":"Auto open diff window","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.diffCommand","description":"Diff command","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.diffHeight","description":"Undotree diff panel height","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.focusOnToggle","description":"Focus undotree after being opened","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.highlightChangedText","description":"Highlight changed text","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.highlightChangesWithSign","description":"Highlight changes with a sign in the gutter","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.highlightSyntaxAdd","description":"Added lines highlight group","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.highlightSyntaxChange","description":"Changed lines highlight group","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.highlightSyntaxDel","description":"Deleted lines highlight group","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.relativeTimestamp","description":"Use a relative timestamp","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.shortIndicators","description":"E.g. use 'd' instead of 'days'","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.showCursorLine","description":"Show cursor line","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.showHelpLine","description":"Show help line","note":"","type":"boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.treeNodeShape","description":"Tree node shape","note":"","type":"null or string","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.windowLayout","description":"Window layout for undotree. Check https://github.com/mbbill/undotree/blob/master/plugin/undotree.vim#L29 for reference","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.undotree.windowWidth","description":"Undotree window width","note":"","type":"null or signed integer","default":"null","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-easy-align.enable","description":"Whether to enable Enable the vim-easy-align plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.vim-easy-align.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-easy-align.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-easy-align.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-printer.enable","description":"Whether to enable Enable the vim-printer plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.vim-printer.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-printer.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-printer.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-startuptime.enable","description":"Whether to enable Enable the vim-startuptime plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.vim-startuptime.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-startuptime.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vim-startuptime.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimtex.enable","description":"Whether to enable Enable the vimtex plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.vimtex.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimtex.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimtex.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimwiki.enable","description":"Whether to enable Enable the vimwiki plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.vimwiki.ext2syntax","description":"A many-to-one mapping between file extensions and syntaxes whose purpose is to register the extensions with Vimwiki.","note":"","type":"null or (attribute set of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimwiki.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimwiki.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimwiki.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimwiki.globalExt","description":"Set this to treat all markdown files in your system as part of vimwiki","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.vimwiki.list","description":"Use this to change the syntex to either Markdown or MediaWiki.","note":"","type":"null or (list of anything)","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.enable","description":"Whether to enable Enable the which-key plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.disable.buftypes","description":"Buf types for which Whichkey should be disabled.","note":"","type":"list of string","default":"[ ]","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.disable.filetypes","description":"File types for which Whichkey should be disabled.","note":"","type":"list of string","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups","description":"Assign names to groups of keybindings with the same prefix to be shown in which-key.","note":"","type":"submodule","default":"{ }","example":"{          normal.\"<leader>g\" = \"git\" # name group of bindings with prefix <leader>g \"git\" in normal mode          visual.\"<leader>f\" = \"find\"        }","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.command","description":"Groups for command-line mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.insert","description":"Groups for insert mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.insertCommand","description":"Groups for insert and command-line mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.lang","description":"Groups for insert, command-line and lang-arg mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.normal","description":"Groups for normal mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.normalVisualOp","description":"Groups for normal, visual, select and operator-pending (same as plain 'map') mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.operator","description":"Groups for operator-pending mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.select","description":"Groups for select mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.terminal","description":"Groups for terminal mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.visual","description":"Groups for visual and select mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.groups.visualOnly","description":"Groups for visual only mode","note":"","type":"attribute set of string","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.marks","description":"Show a list of your marks on ' and `.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.presets.g","description":"Add help for bindings prefixed with g.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.presets.motions","description":"Add help for motions.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.presets.nav","description":"Add help for misc bindings to work with windows.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.presets.operators","description":"Add help for operators like d, y, ... and register them for motion / text object completion.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.presets.textObjects","description":"Add help for text objects triggered after entering an operator.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.presets.windows","description":"Add help for default bindings on &lt;c-w&gt;.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.presets.z","description":"Add help for bindings for folds, spelling and others prefixed with z.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.registers","description":"Show your registers on \" in NORMAL or &lt;C-r&gt; in INSERT mode.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.spelling.enabled","description":"Enable showing WhichKey when pressing z= to select spelling suggestions.","note":"","type":"null or boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.plugins.spelling.suggestions","description":"Number of suggestions to show in the spelling suggestion list.","note":"","type":"null or signed integer","default":"20","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.popupMappings.scrollDown","description":"Binding to scroll down inside the popup.","note":"","type":"null or string","default":"\"<c-d>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.popupMappings.scrollUp","description":"Binding to scroll up inside the popup.","note":"","type":"null or string","default":"\"<c-u>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.window.border","description":"","note":"","type":"null or one of \"none\", \"single\", \"double\", \"shadow\"","default":"\"none\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.which-key.window.position","description":"","note":"","type":"null or one of \"bottom\", \"top\"","default":"\"bottom\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.enable","description":"Whether to enable Enable the wilder plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.enableCmdlineEnter","description":"If true calls wilder#enable_cmdline_enter().Creates a new |CmdlineEnter| autocmd to which will start wilderwhen the cmdline is entered.","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.acceptCompletionAutoSelect","description":"The auto_slect option passed to wilder#accept_completion().","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.acceptKey","description":"Mapping to bind to wilder#accept_completion().","note":"","type":"null or string","default":"\"<Down>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.modes","description":"List of modes which wilder will be active in.Possible elements: '/', '?' and ':'","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.nextKey","description":"A key to map to wilder#next() providing next suggestion.","note":"","type":"null or string","default":"\"<Tab>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.prevKey","description":"A key to map to wilder#prev() providing previous suggestion.","note":"","type":"null or string","default":"\"<S-Tab>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.rejectKey","description":"Mapping to bind to wilder#reject_completion().","note":"","type":"null or string","default":"\"<Up>\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.wilder.wildcharm","description":"Key to set the 'wildcharm' option to. can be set to v:false to skip the setting.","note":"","type":"null or string","default":"\"&wildchar\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.windows.enable","description":"Whether to enable Enable the windows plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.windows.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.windows.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.windows.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zig-env.enable","description":"Whether to enable Enable the zig-env plugin.","note":"This is all-in-one-module for plugins regarding the zig language..","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.zig-env.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zig-env.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zig-env.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zig-env.fmtAutosave","description":"If set to 1 enabled automatic code formatting on save","note":"","type":"null or signed integer","default":"0","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zig-env.lsp","description":"Enable the zls language server for zig","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.enable","description":"Whether to enable Enable the zk plugin.","note":".","type":"boolean","default":"false","example":"true","declared_by":""},{"title":"programs.nixneovim.plugins.zk.extraConfig","description":"Place any extra config here as an attibute-set","note":"","type":"attribute set of anything","default":"{ }","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.extraLua.post","description":"Place any extra lua code here that is loaded after the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.extraLua.pre","description":"Place any extra lua code here that is loaded before the plugin is loaded","note":"","type":"string","default":"\"\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.lsp.autoAttach.enabled","description":"automatically attach buffers in a zk notebook that match the given filetypes","note":"","type":"null or boolean","default":"true","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.lsp.autoAttach.filetypes","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.lsp.config.cmd","description":"","note":"","type":"null or (list of anything)","default":"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.lsp.config.name","description":"`config` is passed to `vim.lsp.start_client(config)`","note":"","type":"null or string","default":"\"zk\"","example":"","declared_by":""},{"title":"programs.nixneovim.plugins.zk.picker","description":"it's recommended to use \"telescope\" or \"fzf\"","note":"","type":"null or one of \"telescope\", \"fzf\", \"select\"","default":"\"select\"","example":"","declared_by":""},{"title":"programs.nixneovim.usePluginDefaults","description":"When false, NixNeovim will output the lua config with all available options.This way, when a default in a plugin changes, your config will stay the same.When true, NixNeovim will output the lua config only with options you have set in you config.This way, all other values will have the default set by the plugin author.When the defaults change, your setup will change.Setting this to true, will significantly reduce the number of lines in your init.lua, depending on the number of plugins enabled.","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.viAlias","description":"Symlink vi to nvim binary.","note":"","type":"boolean","default":"false","example":"","declared_by":""},{"title":"programs.nixneovim.vimAlias","description":"Symlink vim to nvim binary.","note":"","type":"boolean","default":"false","example":"","declared_by":""}]}